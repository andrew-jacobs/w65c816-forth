  Mon Aug 17 2015 15:02                                                                                                    Page 1


                                               ***************************************
                                               **      WDC 65C816 Macro Assembler   **
                                               **                                   **
                                               **     Version 3.49.1- Feb  6 2006    **
                                               ***************************************

     1                        ;==============================================================================
     2                        ;     _    _   _ ____    _____          _   _       _  ___  _  __
     3                        ;    / \  | \ | / ___|  |  ___|__  _ __| |_| |__   ( )( _ )/ |/ /_
     4                        ;   / _ \ |  \| \___ \  | |_ / _ \| '__| __| '_ \  |/ / _ \| | '_ \
     5                        ;  / ___ \| |\  |___) | |  _| (_) | |  | |_| | | |   | (_) | | (_) |
     6                        ; /_/   \_\_| \_|____/  |_|  \___/|_|   \__|_| |_|    \___/|_|\___/
     7                        ;
     8                        ; A Direct Threaded ANS Forth for the WDC 65C816
     9                        ;------------------------------------------------------------------------------
    10                        ; Copyright (C)2015 HandCoded Software Ltd.
    11                        ; All rights reserved.
    12                        ;
    13                        ; This work is made available under the terms of the Creative Commons
    14                        ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    15                        ; following URL to see the details.
    16                        ;
    17                        ; http://creativecommons.org/licenses/by-nc-sa/4.0/
    18                        ;
    19                        ;==============================================================================
    20                        ; Notes:
    21                        ;
    22                        ; This implementation is designed to run in the 65C816's native mode with both
    23                        ; the accumulator and index registers in 16-bit mode except when the word needs
    24                        ; 8-bit memory access.
    25                        ;
    26                        ; The Forth data stack is indexed using the X register witch values held at
    27                        ; the same index offsets as they would be on the return stack. The Y register
    28                        ; holds the forth instruction pointer.
    29                        ;
    30                        ;==============================================================================
    31                        ;------------------------------------------------------------------------------
    32                        
    33                                        pw      132
    34                                        inclist on
    35                        
    36                                        chip    65816
    37                                        longi   off
    38                                        longa   off
    39                        
    40                                        include "w65c816.inc"
     1                        ;==============================================================================
     2                        ; __        ____  ____   ____ ___  _  __   
     3                        ; \ \      / / /_| ___| / ___( _ )/ |/ /_  
     4                        ;  \ \ /\ / / '_ \___ \| |   / _ \| | '_ \ 
     5                        ;   \ V  V /| (_) |__) | |__| (_) | | (_) |
     6                        ;    \_/\_/  \___/____/ \____\___/|_|\___/ 
     7                        ;
     8                        ; Western Design Center W65C816 device definitions                                          
     9                        ;------------------------------------------------------------------------------
    10                        ; Copyright (C)2015 HandCoded Software Ltd.
    11                        ; All rights reserved.
    12                        ;
  Mon Aug 17 2015 15:02                                                                                                    Page 2


    13                        ; This work is made available under the terms of the Creative Commons
    14                        ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    15                        ; following URL to see the details.
    16                        ;
    17                        ; http://creativecommons.org/licenses/by-nc-sa/4.0/
    18                        ;
    19                        ;==============================================================================
    20                        ; Notes:
    21                        ;
    22                        ; Various macros and definitions for the W65C816 microprocessor.
    23                        ;
    24                        ;------------------------------------------------------------------------------
    25                        
    26                        ;==============================================================================
    27                        ; Status Register Bits
    28                        ;------------------------------------------------------------------------------
    29                        
    30             00000007   N_FLAG          equ     7
    31             00000006   V_FLAG          equ     6
    32             00000005   M_FLAG          equ     5
    33             00000004   X_FLAG          equ     4
    34             00000004   B_FLAG          equ     4
    35             00000003   D_FLAG          equ     3
    36             00000002   I_FLAG          equ     2
    37             00000001   Z_FLAG          equ     1
    38             00000000   C_FLAG          equ     0
    39                        
    40                        ;==============================================================================
    41                        ; Macros
    42                        ;------------------------------------------------------------------------------
    43                        
    44                        ; Puts the processor into emulation mode. A, X and Y become 8-bits and the
    45                        ; stack is fixed at $0100-$01ff. 
    46                        
    47                        emulate         macro
    48                                        sec
    49                                        xce
    50                                        endm
    51                        
    52                        ; Puts the processor into native mode. The size of the memory and index
    53                        ; register operations is controlled by the M & X bits in the status register.
    54                        
    55                        native          macro
    56                                        clc
    57                                        xce
    58                                        endm
    59                        
    60                        ; Resets the M bit making the accumator and memory accesses 16-bits wide.
    61                         
    62                        long_a          macro
    63                                        rep     #(1<<M_FLAG)
    64                                        longa   on
    65                                        endm
    66                        
    67                        ; Resets the X bit making the index registers 16-bits wide
    68                        
    69                        long_i          macro
    70                                        rep     #(1<<X_FLAG)
  Mon Aug 17 2015 15:02                                                                                                    Page 3


    71                                        longi   on
    72                                        endm
    73                        
    74                        ; Resets the M and X bits making the accumator, memory accesses and index
    75                        ; registers 16-bits wide.
    76                                        
    77                        long_ai         macro
    78                                        rep     #(1<<M_FLAG)|(1<<X_FLAG)
    79                                        longa   on
    80                                        longi   on
    81                                        endm
    82                        
    83                        ; Sets the M bit making the accumator and memory accesses 16-bits wide.
    84                        
    85                        short_a         macro
    86                                        sep     #(1<<M_FLAG)
    87                                        longa   off
    88                                        endm
    89                        
    90                        ; Sets the X bit making the index registers 8-bits wide
    91                        
    92                        short_i         macro
    93                                        sep     #(1<<X_FLAG)
    94                                        longi   off
    95                                        endm
    96                                        
    97                        ; Sets the M and X bits making the accumator, memory accesses and index
    98                        ; registers 8-bits wide.
    99                        
   100                        short_ai        macro
   101                                        sep     #(1<<M_FLAG)|(1<<X_FLAG)
   102                                        longa   off
   103                                        longi   off
   104                                        endm
    41                        
    42                        ;==============================================================================
    43                        ; Macros
    44                        ;------------------------------------------------------------------------------
    45                        
    46                        HEADER          macro   LEN,NAME,TYPE,LAST
    47                                        dw      LAST
    48                                        db      LEN,NAME,TYPE
    49                                        endm
    50                        
    51             00000000   NORMAL          equ     0
    52             00000001   IMMEDIATE       equ     1
    53                        
    54             00000080   DSTACK_SIZE     equ     128
    55                        
    56                        ;==============================================================================
    57                        ; Data Areas
    58                        ;------------------------------------------------------------------------------
    59                        
    60                                        page0
    61                                        org     $00
    62                        
    63 00:0000:              WA              ds      2
    64                        
  Mon Aug 17 2015 15:02                                                                                                    Page 4


    65 00:0002:              DSTACK          ds      DSTACK_SIZE
    66                        
    67                                        code
    68                                        public  Start
    69                        Start:
    70                                        native
+   70 00:0000: 18                           clc
+   70 00:0001: FB                           xce
    71                                        long_ai
+   71 00:0002: C2 30                        rep     #(1<<M_FLAG)|(1<<X_FLAG)
+   71                                        longa   on
+   71                                        longi   on
    72 00:0004: A2 FF 01                     ldx     #$01ff
    73 00:0007: 9A                           txs
    74 00:0008: A2 81 00                     ldx     #DSTACK+DSTACK_SIZE-1
    75                        
    76 00:000B: A0 xx xx                     ldy     #TEST
    77 00:000E: 4C xx xx                     jmp     NEXT
    78                        
    79                        TEST:
    80 00:0011: xx xx                        dw      BL
    81 00:0013: xx xx                        dw      EMIT
    82 00:0015: xx xx                        dw      BRANCH
    83 00:0017: xx xx                        dw      TEST
    84                        
    85                        ;==============================================================================
    86                        ; System/User Variables
    87                        ;------------------------------------------------------------------------------
    88                        
    89                        
    90                        ;==============================================================================
    91                        ;------------------------------------------------------------------------------
    92                        
    93                        
    94                        BRANCH:
    95 00:0019: B9 00 00                     lda     0,y
    96 00:001C: A8                           tay
    97 00:001D: 4C xx xx                     jmp     NEXT
    98                        
    99                        ;==============================================================================
   100                        ; Constants
   101                        ;------------------------------------------------------------------------------
   102                        
   103                        ; BL
   104                        
   105                                        HEADER  2,"BL",NORMAL,0
+  105 00:0020: 00 00                        dw      0
+  105 00:0022: 02 42 4C 00                  db      2,"BL",NORMAL
   106                        BL:
   107 00:0026: CA                           dex
   108 00:0027: CA                           dex
   109 00:0028: A9 2E 00                     lda     #'.'
   110 00:002B: 95 03                        sta     DSTACK+1,x
   111 00:002D: 4C xx xx                     jmp     NEXT
   112                        
   113                        ; FALSE ( -- false )
   114                        
   115                                        HEADER  5,"FALSE",NORMAL,BL
  Mon Aug 17 2015 15:02                                                                                                    Page 5


+  115 00:0030: xx xx                        dw      BL
+  115 00:0032: 05 46 41 4C                  db      5,"FALSE",NORMAL
       00:0036: 53 45 00 
   116                        FALSE:
   117 00:0039: CA                           dex                             ; Make space on the stack
   118 00:003A: CA                           dex
   119 00:003B: 74 03                        stz     DSTACK+1,X              ; And create a false value
   120 00:003D: 4C xx xx                     jmp     NEXT                    ; Done
   121                        
   122                        ; TRUE ( -- true )
   123                        
   124                                        HEADER  4,"TRUE",NORMAL,FALSE
+  124 00:0040: xx xx                        dw      FALSE
+  124 00:0042: 04 54 52 55                  db      4,"TRUE",NORMAL
       00:0046: 45 00 
   125                        TRUE:
   126 00:0048: CA                           dex                             ; Make space on the stack
   127 00:0049: CA                           dex
   128 00:004A: 74 03                        stz     DSTACK+1,x              ; And create a true value
   129 00:004C: D6 03                        dec     DSTACK+1,x
   130 00:004E: 4C xx xx                     jmp     NEXT                    ; Done
   131                        
   132                        ;==============================================================================
   133                        ; Memory Operations
   134                        ;------------------------------------------------------------------------------
   135                        
   136                        ; ! ( x a-addr -- )
   137                        ;
   138                        ; Store x at a-addr.
   139                        
   140                                        HEADER  1,"!",NORMAL,TRUE
+  140 00:0051: xx xx                        dw      TRUE
+  140 00:0053: 01 21 00                     db      1,"!",NORMAL
   141                        STORE:
   142 00:0056: 5A                           phy
   143 00:0057: B4 03                        ldy     DSTACK+1,x              ; Fetch the memory address
   144 00:0059: B5 05                        lda     DSTACK+3,x              ; Fetch the data value
   145 00:005B: 99 00 00                     sta     0,y                     ; Save it
   146 00:005E: E8                           inx
   147 00:005F: E8                           inx
   148 00:0060: E8                           inx
   149 00:0061: E8                           inx
   150 00:0062: 7A                           ply
   151 00:0063: 4C xx xx                     jmp     NEXT                    ; Done
   152                        
   153                        ; @ ( addr -- x )
   154                        
   155                                        HEADER  1,"@",NORMAL,STORE
+  155 00:0066: xx xx                        dw      STORE
+  155 00:0068: 01 40 00                     db      1,"@",NORMAL
   156                        FETCH:
   157 00:006B: 5A                           phy
   158 00:006C: B4 03                        ldy     DSTACK+1,x              ; Fetch the memory address
   159 00:006E: B9 00 00                     lda     0,y                     ; Load the actual data
   160 00:0071: 95 03                        sta     DSTACK+1,x              ; And replace the top value
   161 00:0073: 7A                           ply
   162 00:0074: 4C xx xx                     jmp     NEXT                    ; Done
   163                        
  Mon Aug 17 2015 15:02                                                                                                    Page 6


   164                        ; 2! ( x1 x2 a-addr -- )
   165                        ;
   166                        ; Store the cell pair x1 x2 at a-addr, with x2 at a-addr and x1 at the next
   167                        ; consecutive cell. It is equivalent to the sequence SWAP OVER ! CELL+ !.
   168                        
   169                                        HEADER  2,"2!",NORMAL,FETCH
+  169 00:0077: xx xx                        dw      FETCH
+  169 00:0079: 02 32 21 00                  db      2,"2!",NORMAL
   170                        TWO_STORE:
   171 00:007D: 4C xx xx                     jmp     DO_COLON
   172 00:0080: xx xx                        dw      SWAP
   173 00:0082: xx xx                        dw      OVER
   174 00:0084: xx xx                        dw      STORE
   175 00:0086: xx xx                        dw      CELL_PLUS
   176 00:0088: xx xx                        dw      STORE
   177 00:008A: xx xx                        dw      EXIT
   178                        
   179                        ; 2@ ( a-addr -- x1 x2 )
   180                        ;
   181                        ; Fetch the cell pair x1 x2 stored at a-addr. x2 is stored at a-addr and x1 at
   182                        ; the next consecutive cell. It is equivalent to the sequence DUP CELL+ @ SWAP
   183                        ; @.
   184                        
   185                                        HEADER  2,"2@",NORMAL,TWO_STORE
+  185 00:008C: xx xx                        dw      TWO_STORE
+  185 00:008E: 02 32 40 00                  db      2,"2@",NORMAL
   186                        TWO_FETCH:
   187 00:0092: 4C xx xx                     jmp     DO_COLON
   188 00:0095: xx xx                        dw      DUP
   189 00:0097: xx xx                        dw      CELL_PLUS
   190 00:0099: xx xx                        dw      FETCH
   191 00:009B: xx xx                        dw      SWAP
   192 00:009D: xx xx                        dw      FETCH
   193 00:009F: xx xx                        dw      EXIT
   194                        
   195                        ; C! ( x addr -- )
   196                        
   197                                        HEADER  2,"C!",NORMAL,TWO_FETCH
+  197 00:00A1: xx xx                        dw      TWO_FETCH
+  197 00:00A3: 02 43 21 00                  db      2,"C!",NORMAL
   198                        C_STORE:
   199 00:00A7: 5A                           phy
   200 00:00A8: B4 03                        ldy     DSTACK+1,x              ; Fetch the memory address
   201 00:00AA: B5 05                        lda     DSTACK+3,x              ; Fetch the data value
   202                                        short_a
+  202 00:00AC: E2 20                        sep     #(1<<M_FLAG)
+  202                                        longa   off
   203 00:00AE: 99 00 00                     sta     0,y                     ; Save it
   204                                        long_a
+  204 00:00B1: C2 20                        rep     #(1<<M_FLAG)
+  204                                        longa   on
   205 00:00B3: E8                           inx
   206 00:00B4: E8                           inx
   207 00:00B5: E8                           inx
   208 00:00B6: E8                           inx
   209 00:00B7: 7A                           ply
   210 00:00B8: 4C xx xx                     jmp     NEXT                    ; Done
   211                        
  Mon Aug 17 2015 15:02                                                                                                    Page 7


   212                        ; C@ ( addr -- x )
   213                        
   214                                        HEADER  2,"C@",NORMAL,C_STORE
+  214 00:00BB: xx xx                        dw      C_STORE
+  214 00:00BD: 02 43 40 00                  db      2,"C@",NORMAL
   215                        C_FETCH:
   216 00:00C1: 5A                           phy
   217 00:00C2: B4 03                        ldy     DSTACK+1,x              ; Fetch the memory address
   218                                        short_a
+  218 00:00C4: E2 20                        sep     #(1<<M_FLAG)
+  218                                        longa   off
   219 00:00C6: B9 00 00                     lda     0,y                     ; Load the actual data
   220                                        long_a
+  220 00:00C9: C2 20                        rep     #(1<<M_FLAG)
+  220                                        longa   on
   221 00:00CB: 29 FF 00                     and     #$00ff
   222 00:00CE: 95 03                        sta     DSTACK+1,x              ; And replace the top value
   223 00:00D0: 7A                           ply
   224 00:00D1: 4C xx xx                     jmp     NEXT                    ; Done
   225                        
   226                        ; CELL+
   227                        
   228                                        HEADER  5,"CELL+",NORMAL,C_FETCH
+  228 00:00D4: xx xx                        dw      C_FETCH
+  228 00:00D6: 05 43 45 4C                  db      5,"CELL+",NORMAL
       00:00DA: 4C 2B 00 
   229                        CELL_PLUS:
   230 00:00DD: F6 03                        inc     DSTACK+1,x              ; Bump the address by two
   231 00:00DF: F6 03                        inc     DSTACK+1,X
   232 00:00E1: 4C xx xx                     jmp     NEXT
   233                        
   234                        ;==============================================================================
   235                        ; Stack Operations
   236                        ;------------------------------------------------------------------------------
   237                        
   238                        ; 2DROP ( x1 x2 -- )
   239                        ;
   240                        ; Drop cell pair x1 x2 from the stack.
   241                        
   242                                        HEADER  5,"2DROP",NORMAL,CELL_PLUS
+  242 00:00E4: xx xx                        dw      CELL_PLUS
+  242 00:00E6: 05 32 44 52                  db      5,"2DROP",NORMAL
       00:00EA: 4F 50 00 
   243                        TWO_DROP:
   244 00:00ED: E8                           inx
   245 00:00EE: E8                           inx
   246 00:00EF: E8                           inx
   247 00:00F0: E8                           inx
   248 00:00F1: 4C xx xx                     jmp     NEXT
   249                        
   250                        ; 2DUP
   251                        
   252                        ; 2OVER
   253                        
   254                        ; DROP ( x -- )
   255                        ;
   256                        ; Remove x from the stack.
   257                        
  Mon Aug 17 2015 15:02                                                                                                    Page 8


   258                                        HEADER  4,"DROP",NORMAL,TWO_DROP
+  258 00:00F4: xx xx                        dw      TWO_DROP
+  258 00:00F6: 04 44 52 4F                  db      4,"DROP",NORMAL
       00:00FA: 50 00 
   259                        DROP:
   260 00:00FC: E8                           inx                             ; Drop the top value
   261 00:00FD: E8                           inx
   262 00:00FE: 4C xx xx                     jmp     NEXT                    ; Done
   263                        
   264                        ; DUP ( x -- x x )
   265                        ;
   266                        ; Duplicate x.
   267                        
   268                                        HEADER  3,"DUP",NORMAL,DROP
+  268 00:0101: xx xx                        dw      DROP
+  268 00:0103: 03 44 55 50                  db      3,"DUP",NORMAL
       00:0107: 00 
   269                        DUP:
   270 00:0108: B5 03                        lda     DSTACK+1,x              ; Fetch top value
   271 00:010A: CA                           dex                             ; And make a copy
   272 00:010B: CA                           dex
   273 00:010C: 95 03                        sta     DSTACK+1,x
   274 00:010E: 4C xx xx                     jmp     NEXT                    ; Done
   275                        
   276                        ; OVER ( x1 x2 -- x1 x2 x1 )
   277                        
   278                                        HEADER  4,"OVER",NORMAL,DUP
+  278 00:0111: xx xx                        dw      DUP
+  278 00:0113: 04 4F 56 45                  db      4,"OVER",NORMAL
       00:0117: 52 00 
   279                        OVER:
   280 00:0119: B5 05                        lda     DSTACK+3,x              ; Fetch second value
   281 00:011B: CA                           dex                             ; And make a copy
   282 00:011C: CA                           dex
   283 00:011D: 95 03                        sta     DSTACK+1,x
   284 00:011F: 4C xx xx                     jmp     NEXT                    ; Done
   285                        
   286                        ; SWAP ( x1 x2 -- x2 x1 )
   287                        
   288                                        HEADER  4,"SWAP",NORMAL,OVER
+  288 00:0122: xx xx                        dw      OVER
+  288 00:0124: 04 53 57 41                  db      4,"SWAP",NORMAL
       00:0128: 50 00 
   289                        SWAP:
   290 00:012A: B5 03                        lda     DSTACK+1,x
   291 00:012C: 48                           pha
   292 00:012D: B5 05                        lda     DSTACK+3,x
   293 00:012F: 95 03                        sta     DSTACK+1,x
   294 00:0131: 68                           pla
   295 00:0132: 95 05                        sta     DSTACK+3,x
   296 00:0134: 4C xx xx                     jmp     NEXT
   297                        
   298                        ;==============================================================================
   299                        ; Return Stack Operations
   300                        ;------------------------------------------------------------------------------
   301                        
   302                                        HEADER  2,">R",NORMAL,SWAP
+  302 00:0137: xx xx                        dw      SWAP
  Mon Aug 17 2015 15:02                                                                                                    Page 9


+  302 00:0139: 02 3E 52 00                  db      2,">R",NORMAL
   303                        TO_R:
   304 00:013D: B5 03                        lda     DSTACK+1,x              ; Transfer top value
   305 00:013F: 48                           pha                             ; .. to return stack
   306 00:0140: E8                           inx
   307 00:0141: E8                           inx
   308 00:0142: 4C xx xx                     jmp     NEXT                    ; Done
   309                        
   310                                        HEADER 2,"R>",NORMAL,TO_R
+  310 00:0145: xx xx                        dw      TO_R
+  310 00:0147: 02 52 3E 00                  db      2,"R>",NORMAL
   311                        R_FROM:
   312 00:014B: 68                           pla                             ; Fetch return stack value
   313 00:014C: CA                           dex                             ; And push
   314 00:014D: CA                           dex
   315 00:014E: 95 03                        sta     DSTACK+1,X
   316 00:0150: 4C xx xx                     jmp     NEXT                    ; Done
   317                        
   318                        ;==============================================================================
   319                        ; Single Precision Arithmetic
   320                        ;------------------------------------------------------------------------------
   321                        
   322                        ; + ( n1|u1 n2|u2 -- n3|u3 )
   323                        ;
   324                        ; Add n2|u2 to n1|u1, giving the sum n3|u3.
   325                        
   326                                        HEADER  1,"+",NORMAL,R_FROM
+  326 00:0153: xx xx                        dw      R_FROM
+  326 00:0155: 01 2B 00                     db      1,"+",NORMAL
   327                        PLUS:
   328 00:0158: 18                           clc
   329 00:0159: B5 03                        lda     DSTACK+1,x
   330 00:015B: 75 05                        adc     DSTACK+3,x
   331 00:015D: 95 05                        sta     DSTACK+3,x
   332 00:015F: E8                           inx
   333 00:0160: E8                           inx
   334 00:0161: 4C xx xx                     JMP     NEXT                    ; Done
   335                        
   336                        ; - ( n1|u1 n2|u2 -- n3|u3 )
   337                        ;
   338                        ; Subtract n2|u2 from n1|u1, giving the difference n3|u3.
   339                        
   340                                        HEADER  1,"-",NORMAL,PLUS
+  340 00:0164: xx xx                        dw      PLUS
+  340 00:0166: 01 2D 00                     db      1,"-",NORMAL
   341                        MINUS:
   342 00:0169: 38                           sec
   343 00:016A: B5 03                        lda     DSTACK+1,x
   344 00:016C: F5 05                        sbc     DSTACK+3,x
   345 00:016E: 95 05                        sta     DSTACK+3,x
   346 00:0170: E8                           inx
   347 00:0171: E8                           inx
   348 00:0172: 4C xx xx                     jmp     NEXT
   349                        
   350                        ; 1+ ( n1|u1 -- n2|u2 )
   351                        ;
   352                        ; Add one (1) to n1|u1 giving the sum n2|u2.
   353                        
  Mon Aug 17 2015 15:02                                                                                                    Page 10


   354                                        HEADER  2,"1+",NORMAL,MINUS
+  354 00:0175: xx xx                        dw      MINUS
+  354 00:0177: 02 31 2B 00                  db      2,"1+",NORMAL
   355                        ONE_PLUS:
   356 00:017B: F6 03                        inc     DSTACK+1,x
   357 00:017D: 4C xx xx                     jmp     NEXT                    ; Done
   358                        
   359                        ; NEGATE
   360                        
   361                                        HEADER  6,"NEGATE",NORMAL,ONE_PLUS
+  361 00:0180: xx xx                        dw      ONE_PLUS
+  361 00:0182: 06 4E 45 47                  db      6,"NEGATE",NORMAL
       00:0186: 41 54 45 00 
   362                        NEGATE:
   363 00:018A: 38                           sec
   364 00:018B: A9 00 00                     lda     #0
   365 00:018E: F5 03                        sbc     DSTACK+1,x
   366 00:0190: 95 03                        sta     DSTACK+1,x
   367 00:0192: 4C xx xx                     jmp     NEXT                    ; Done
   368                        
   369                        ;==============================================================================
   370                        ; Mixed Arithmetic
   371                        ;------------------------------------------------------------------------------
   372                        
   373                        ;==============================================================================
   374                        ; Comparisons
   375                        ;------------------------------------------------------------------------------
   376                        
   377                        ;==============================================================================
   378                        ; Logical Operations
   379                        ;------------------------------------------------------------------------------
   380                        
   381                        ; AND ( x1 x2 -- x3 )
   382                        
   383                                        HEADER  3,"AND",NORMAL,NEGATE
+  383 00:0195: xx xx                        dw      NEGATE
+  383 00:0197: 03 41 4E 44                  db      3,"AND",NORMAL
       00:019B: 00 
   384                        AND:
   385 00:019C: B5 03                        lda     DSTACK+1,x
   386 00:019E: 35 05                        and     DSTACK+3,x
   387 00:01A0: 95 05                        sta     DSTACK+3,x
   388 00:01A2: E8                           inx
   389 00:01A3: E8                           inx
   390 00:01A4: 4C xx xx                     jmp     NEXT
   391                        
   392                        ; INVERT ( x -- !x )
   393                        
   394                                        HEADER  6,"INVERT",NORMAL,AND
+  394 00:01A7: xx xx                        dw      AND
+  394 00:01A9: 06 49 4E 56                  db      6,"INVERT",NORMAL
       00:01AD: 45 52 54 00 
   395                        INVERT:
   396 00:01B1: B5 03                        lda     DSTACK+1,x              ; Fetch top value
   397 00:01B3: 49 FF FF                     eor     #$ffff                  ; Invert all the bits
   398 00:01B6: 95 03                        sta     DSTACK+1,x              ; And write back
   399 00:01B8: 4C xx xx                     jmp     NEXT                    ; Done
   400                        
  Mon Aug 17 2015 15:02                                                                                                    Page 11


   401                        ; AND ( x1 x2 -- x3 )
   402                        
   403                                        HEADER  2,"OR",NORMAL,INVERT
+  403 00:01BB: xx xx                        dw      INVERT
+  403 00:01BD: 02 4F 52 00                  db      2,"OR",NORMAL
   404                        OR:
   405 00:01C1: B5 03                        lda     DSTACK+1,x
   406 00:01C3: 15 05                        ora     DSTACK+3,x
   407 00:01C5: 95 05                        sta     DSTACK+3,x
   408 00:01C7: E8                           inx
   409 00:01C8: E8                           inx
   410 00:01C9: 4C xx xx                     jmp     NEXT
   411                        
   412                        ; XOR ( x1 x2 -- x3 )
   413                        
   414                                        HEADER  3,"XOR",NORMAL,OR
+  414 00:01CC: xx xx                        dw      OR
+  414 00:01CE: 03 58 4F 52                  db      3,"XOR",NORMAL
       00:01D2: 00 
   415                        XOR:
   416 00:01D3: B5 03                        lda     DSTACK+1,x
   417 00:01D5: 55 05                        eor     DSTACK+3,x
   418 00:01D7: 95 05                        sta     DSTACK+3,x
   419 00:01D9: E8                           inx
   420 00:01DA: E8                           inx
   421 00:01DB: 4C xx xx                     jmp     NEXT
   422                        
   423                        ;================================================================================
   424                        ; Control Words
   425                        ;--------------------------------------------------------------------------------
   426                        
   427                                        HEADER  1,":",NORMAL,XOR
+  427 00:01DE: xx xx                        dw      XOR
+  427 00:01E0: 01 3A 00                     db      1,":",NORMAL
   428                        COLON:
   429                        
   430                        
   431                        DO_COLON:
   432 00:01E3: 5A                           phy                             ; Save the instruction pointer
   433 00:01E4: A8                           tay                             ; Calculate the new IP
   434 00:01E5: C8                           iny
   435 00:01E6: C8                           iny
   436 00:01E7: C8                           iny
   437                        NEXT:
   438 00:01E8: B9 00 00                     lda     0,y                     ; Fetch the next word address
   439 00:01EB: 85 00                        sta     WA
   440 00:01ED: C8                           iny                             ; Bump the instruction pointer
   441 00:01EE: C8                           iny
   442 00:01EF: 6C 00 00                     jmp     (!WA)                   ; And execute word
   443                        
   444                        
   445                        ; EXIT ( -- ) ( R: nest-sys -- )
   446                        
   447                                        HEADER 4,"EXIT",NORMAL,COLON
+  447 00:01F2: xx xx                        dw      COLON
+  447 00:01F4: 04 45 58 49                  db      4,"EXIT",NORMAL
       00:01F8: 54 00 
   448                        EXIT:
  Mon Aug 17 2015 15:02                                                                                                    Page 12


   449 00:01FA: 7A                           ply
   450 00:01FB: 7A                           ply
   451 00:01FC: 4C xx xx                     jmp     NEXT
   452                        
   453                        ;================================================================================
   454                        ;--------------------------------------------------------------------------------
   455                        
   456                        ; EMIT
   457                        
   458                                        HEADER  4,"EMIT",NORMAL,EXIT
+  458 00:01FF: xx xx                        dw      EXIT
+  458 00:0201: 04 45 4D 49                  db      4,"EMIT",NORMAL
       00:0205: 54 00 
   459                                        extern  UartTx
   460                        EMIT:
   461 00:0207: B5 03                        lda     DSTACK+1,X
   462 00:0209: 20 xx xx                     jsr     UartTx
   463 00:020C: E8                           inx
   464 00:020D: E8                           inx
   465 00:020E: 4C xx xx                     jmp     NEXT
   466                        
   467                        ; KEY
   468                        
   469                                        HEADER  3,"KEY",NORMAL,EMIT
+  469 00:0211: xx xx                        dw      EMIT
+  469 00:0213: 03 4B 45 59                  db      3,"KEY",NORMAL
       00:0217: 00 
   470                                        extern  UartRx
   471                        KEY:
   472 00:0218: 20 xx xx                     jsr     UartRx
   473 00:021B: 29 FF 00                     and     #$00ff
   474 00:021E: CA                           dex
   475 00:021F: CA                           dex
   476 00:0220: 95 03                        sta     DSTACK+1,x
   477 00:0222: 4C xx xx                     jmp     NEXT
   478                        
   479                        ;================================================================================
   480                        ;--------------------------------------------------------------------------------
   481                        
   482                                        end


      Lines assembled: 657
      Errors: 0
