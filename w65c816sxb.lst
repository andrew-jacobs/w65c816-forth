  Mon Aug 17 2015 16:02                                                                                                    Page 1


                                               ***************************************
                                               **      WDC 65C816 Macro Assembler   **
                                               **                                   **
                                               **     Version 3.49.1- Feb  6 2006    **
                                               ***************************************

     1                        ;==============================================================================
     2                        ; __        ____  ____   ____ ___  _  __  ______  ______
     3                        ; \ \      / / /_| ___| / ___( _ )/ |/ /_/ ___\ \/ / __ )
     4                        ;  \ \ /\ / / '_ \___ \| |   / _ \| | '_ \___ \\  /|  _ \
     5                        ;   \ V  V /| (_) |__) | |__| (_) | | (_) |__) /  \| |_) |
     6                        ;    \_/\_/  \___/____/ \____\___/|_|\___/____/_/\_\____/
     7                        ;
     8                        ; Basic Vector Handling for the W65C816SXB Development Board
     9                        ;------------------------------------------------------------------------------
    10                        ; Copyright (C)2015 HandCoded Software Ltd.
    11                        ; All rights reserved.
    12                        ;
    13                        ; This work is made available under the terms of the Creative Commons
    14                        ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    15                        ; following URL to see the details.
    16                        ;
    17                        ; http://creativecommons.org/licenses/by-nc-sa/4.0/
    18                        ;
    19                        ;==============================================================================
    20                        ; Notes:
    21                        ;
    22                        ; This code does not use ACIA interrupts directly by the status register is
    23                        ; still checked in the interrupt handler. In testing I found that ACIA would
    24                        ; not work it it was not regularly polled.
    25                        ;
    26                        ; A software semaphore cleared by a one short timer (VIA1 T2) is used to work
    27                        ; around the ACIA transmission silicon bug.
    28                        ;
    29                        ; TODO:
    30                        ;
    31                        ; No support for BRK in emulation mode.
    32                        ; Improve data memory bank handling.
    33                        ;
    34                        ;------------------------------------------------------------------------------
    35                        
    36                                        pw      132
    37                                        inclist on
    38                        
    39                                        chip    65816
    40                                        longi   off
    41                                        longa   off
    42                        
    43                                        include "w65c816.inc"
     1                        ;==============================================================================
     2                        ; __        ____  ____   ____ ___  _  __   
     3                        ; \ \      / / /_| ___| / ___( _ )/ |/ /_  
     4                        ;  \ \ /\ / / '_ \___ \| |   / _ \| | '_ \ 
     5                        ;   \ V  V /| (_) |__) | |__| (_) | | (_) |
     6                        ;    \_/\_/  \___/____/ \____\___/|_|\___/ 
     7                        ;
     8                        ; Western Design Center W65C816 device definitions                                          
     9                        ;------------------------------------------------------------------------------
  Mon Aug 17 2015 16:02                                                                                                    Page 2


    10                        ; Copyright (C)2015 HandCoded Software Ltd.
    11                        ; All rights reserved.
    12                        ;
    13                        ; This work is made available under the terms of the Creative Commons
    14                        ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    15                        ; following URL to see the details.
    16                        ;
    17                        ; http://creativecommons.org/licenses/by-nc-sa/4.0/
    18                        ;
    19                        ;==============================================================================
    20                        ; Notes:
    21                        ;
    22                        ; Various macros and definitions for the W65C816 microprocessor.
    23                        ;
    24                        ;------------------------------------------------------------------------------
    25                        
    26                        ;==============================================================================
    27                        ; Status Register Bits
    28                        ;------------------------------------------------------------------------------
    29                        
    30             00000007   N_FLAG          equ     7
    31             00000006   V_FLAG          equ     6
    32             00000005   M_FLAG          equ     5
    33             00000004   X_FLAG          equ     4
    34             00000004   B_FLAG          equ     4
    35             00000003   D_FLAG          equ     3
    36             00000002   I_FLAG          equ     2
    37             00000001   Z_FLAG          equ     1
    38             00000000   C_FLAG          equ     0
    39                        
    40                        ;==============================================================================
    41                        ; Macros
    42                        ;------------------------------------------------------------------------------
    43                        
    44                        ; Puts the processor into emulation mode. A, X and Y become 8-bits and the
    45                        ; stack is fixed at $0100-$01ff. 
    46                        
    47                        emulate         macro
    48                                        sec
    49                                        xce
    50                                        endm
    51                        
    52                        ; Puts the processor into native mode. The size of the memory and index
    53                        ; register operations is controlled by the M & X bits in the status register.
    54                        
    55                        native          macro
    56                                        clc
    57                                        xce
    58                                        endm
    59                        
    60                        ; Resets the M bit making the accumator and memory accesses 16-bits wide.
    61                         
    62                        long_a          macro
    63                                        rep     #(1<<M_FLAG)
    64                                        longa   on
    65                                        endm
    66                        
    67                        ; Resets the X bit making the index registers 16-bits wide
  Mon Aug 17 2015 16:02                                                                                                    Page 3


    68                        
    69                        long_i          macro
    70                                        rep     #(1<<X_FLAG)
    71                                        longi   on
    72                                        endm
    73                        
    74                        ; Resets the M and X bits making the accumator, memory accesses and index
    75                        ; registers 16-bits wide.
    76                                        
    77                        long_ai         macro
    78                                        rep     #(1<<M_FLAG)|(1<<X_FLAG)
    79                                        longa   on
    80                                        longi   on
    81                                        endm
    82                        
    83                        ; Sets the M bit making the accumator and memory accesses 16-bits wide.
    84                        
    85                        short_a         macro
    86                                        sep     #(1<<M_FLAG)
    87                                        longa   off
    88                                        endm
    89                        
    90                        ; Sets the X bit making the index registers 8-bits wide
    91                        
    92                        short_i         macro
    93                                        sep     #(1<<X_FLAG)
    94                                        longi   off
    95                                        endm
    96                                        
    97                        ; Sets the M and X bits making the accumator, memory accesses and index
    98                        ; registers 8-bits wide.
    99                        
   100                        short_ai        macro
   101                                        sep     #(1<<M_FLAG)|(1<<X_FLAG)
   102                                        longa   off
   103                                        longi   off
   104                                        endm
    44                                        include "w65c816sxb.inc"
     1                        ;==============================================================================
     2                        ; __        ____  ____   ____ ___  _  __  ______  ______
     3                        ; \ \      / / /_| ___| / ___( _ )/ |/ /_/ ___\ \/ / __ )
     4                        ;  \ \ /\ / / '_ \___ \| |   / _ \| | '_ \___ \\  /|  _ \
     5                        ;   \ V  V /| (_) |__) | |__| (_) | | (_) |__) /  \| |_) |
     6                        ;    \_/\_/  \___/____/ \____\___/|_|\___/____/_/\_\____/
     7                        ;
     8                        ; Western Design Center W65C816SXB Development Board Hardware Definitions
     9                        ;------------------------------------------------------------------------------
    10                        ; Copyright (C)2015 HandCoded Software Ltd.
    11                        ; All rights reserved.
    12                        ;
    13                        ; This work is made available under the terms of the Creative Commons
    14                        ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    15                        ; following URL to see the details.
    16                        ;
    17                        ; http://creativecommons.org/licenses/by-nc-sa/4.0/
    18                        ;
    19                        ;==============================================================================
    20                        ; Notes:
  Mon Aug 17 2015 16:02                                                                                                    Page 4


    21                        ;
    22                        ; All of the current stock of W65C51 ACIAs have a silicon bug that causes the
    23                        ; 'Transmit Data Register Empty' (TDRE) bit in the status register to be stuck
    24                        ; high making it impossible to tell when the transmitter is ready for the next
    25                        ; data byte.
    26                        ;
    27                        ;------------------------------------------------------------------------------
    28                        
    29             007A1200   OSC_FREQ        equ     8000000                 ; SXB runs at 8MHz
    30                        
    31                        ;==============================================================================
    32                        ; W65C51 ACIA
    33                        ;------------------------------------------------------------------------------
    34                        
    35             00007F80   ACIA_RXD        equ     $7f80
    36             00007F80   ACIA_TXD        equ     $7f80
    37             00007F81   ACIA_SR         equ     $7f81
    38             00007F82   ACIA_CMD        equ     $7f82
    39             00007F83   ACIA_CTL        equ     $7f83
    40                        
    41                        ;==============================================================================
    42                        ; W65C21 PIA
    43                        ;------------------------------------------------------------------------------
    44                        
    45             00007FA0   PIA_PIA         equ     $7fa0
    46             00007FA0   PIA_DDRA        equ     $7fa0
    47             00007FA1   PIA_CRA         equ     $7fa1
    48             00007FA2   PIA_PIB         equ     $7fa2
    49             00007FA2   PIA_DDRB        equ     $7fa2
    50             00007FA3   PIA_CRB         equ     $7fa3
    51                        
    52                        ;==============================================================================
    53                        ; W65C22 VIA
    54                        ;------------------------------------------------------------------------------
    55                        
    56             00007FC0   VIA1_ORB        equ     $7fc0
    57             00007FC0   VIA1_IRB        equ     $7fc0
    58             00007FC1   VIA1_ORA        equ     $7fc1
    59             00007FC1   VIA1_IRA        equ     $7fc1
    60             00007FC2   VIA1_DDRB       equ     $7fc2
    61             00007FC3   VIA1_DDRA       equ     $7fc3
    62             00007FC4   VIA1_T1CL       equ     $7fc4
    63             00007FC5   VIA1_T1CH       equ     $7fc5
    64             00007FC6   VIA1_T1LL       equ     $7fc6
    65             00007FC7   VIA1_T1LH       equ     $7fc7
    66             00007FC8   VIA1_T2CL       equ     $7fc8
    67             00007FC9   VIA1_T2CH       equ     $7fc9
    68             00007FCA   VIA1_SR         equ     $7fca
    69             00007FCB   VIA1_ACR        equ     $7fcb
    70             00007FCC   VIA1_PCR        equ     $7fcc
    71             00007FCD   VIA1_IFR        equ     $7fcd
    72             00007FCE   VIA1_IER        equ     $7fce
    73             00007FCF   VIA1_ORAN       equ     $7fcf
    74             00007FCF   VIA1_IRAN       equ     $7fcf
    75                        
    76                        ;------------------------------------------------------------------------------
    77                        
    78             00007FE0   VIA2_ORB        equ     $7fe0
  Mon Aug 17 2015 16:02                                                                                                    Page 5


    79             00007FE0   VIA2_IRB        equ     $7fe0
    80             00007FE1   VIA2_ORA        equ     $7fe1
    81             00007FE1   VIA2_IRA        equ     $7fe1
    82             00007FE2   VIA2_DDRB       equ     $7fe2
    83             00007FE3   VIA2_DDRA       equ     $7fe3
    84             00007FE4   VIA2_T1CL       equ     $7fe4
    85             00007FE5   VIA2_T1CH       equ     $7fe5
    86             00007FE6   VIA2_T1LL       equ     $7fe6
    87             00007FE7   VIA2_T1LH       equ     $7fe7
    88             00007FE8   VIA2_T2CL       equ     $7fe8
    89             00007FE9   VIA2_T2CH       equ     $7fe9
    90             00007FEA   VIA2_SR         equ     $7fea
    91             00007FEB   VIA2_ACR        equ     $7feb
    92             00007FEC   VIA2_PCR        equ     $7fec
    93             00007FED   VIA2_IFR        equ     $7fed
    94             00007FEE   VIA2_IER        equ     $7fee
    95             00007FEF   VIA2_ORAN       equ     $7fef
    96             00007FEF   VIA2_IRAN       equ     $7fef
    45                        
    46                        ;==============================================================================
    47                        ; Configuration
    48                        ;------------------------------------------------------------------------------
    49                        
    50             000000C8   TIMER_HZ        equ     200                     ; Jiffy timer rate Hz
    51                        
    52             00004B00   BAUD_RATE       equ     19200                   ; ACIA baud rate
    53                        
    54                        ;------------------------------------------------------------------------------
    55                        
    56             00009C3E   TMR_COUNT       equ     OSC_FREQ/TIMER_HZ-2
    57                        
    58                                        if      TMR_COUNT&$ffff0000
    59                                        messg   "TMR_COUNT does not fit in 16-bits"
    60                                        endif
    61                        
    62             000011E8   TXD_COUNT       equ     OSC_FREQ/(BAUD_RATE/11)
    63                        
    64                                        if      TXD_DELAY&$ffff0000
    65                                        messg   "TXD_DELAY does not fit in 16-bits"
    66                                        endif
    67                        
    68                        ;==============================================================================
    69                        ; Data Areas
    70                        ;------------------------------------------------------------------------------
    71                        
    72                                        data
    73                                        org     $200
    74                        
    75 00:0200:              LOCKS           ds      1                       ; Semaphore locks
    76                        
    77             00000080   TX_LOCK         equ     $80                     ; Indicates ACIA TX in flight
    78                        
    79                        ;------------------------------------------------------------------------------
    80                        
    81 00:0201:              JIFFY           ds      1                       ; Jiffy counter
    82 00:0202:              TIME            ds      4                       ; Seconds counter
    83                        
    84                        ;==============================================================================
  Mon Aug 17 2015 16:02                                                                                                    Page 6


    85                        ; Power On Reset
    86                        ;------------------------------------------------------------------------------
    87                        
    88                                        code
    89                                        extern  Start
    90                        RESET:
    91 00:0000: 9C 00 02                     stz     LOCKS                   ; Clear lock bits
    92                        
    93 00:0003: 9C 01 02                     stz     JIFFY                   ; Clear timer counters
    94 00:0006: 9C 02 02                     stz     TIME+0
    95 00:0009: 9C 03 02                     stz     TIME+1
    96 00:000C: 9C 04 02                     stz     TIME+2
    97 00:000F: 9C 05 02                     stz     TIME+3
    98                        
    99 00:0012: A9 1F                        lda     #%00011111              ; 8 bits, 1 stop bit, 19200 baud
   100 00:0014: 8D 83 7F                     sta     ACIA_CTL
   101 00:0017: A9 09                        lda     #%00001001              ; No parity, no interrupt
   102 00:0019: 8D 82 7F                     sta     ACIA_CMD
   103 00:001C: AD 80 7F                     lda     ACIA_RXD                ; Clear receive buffer
   104                        
   105 00:001F: AD CE 7F                     lda     VIA1_IER                ; Disable active interrupts
   106 00:0022: 8D CE 7F                     sta     VIA1_IER
   107 00:0025: A9 40                        lda     #%01000000              ; Configure VIA Timers
   108 00:0027: 8D CB 7F                     sta     VIA1_ACR
   109 00:002A: A9 3E                        lda     #<TMR_COUNT             ; Set timer counts
   110 00:002C: 8D C4 7F                     sta     VIA1_T1CL
   111 00:002F: A9 9C                        lda     #>TMR_COUNT
   112 00:0031: 8D C5 7F                     sta     VIA1_T1CH
   113 00:0034: A9 C0                        lda     #%11000000              ; Enable Timer1 interrupt
   114 00:0036: 8D CE 7F                     sta     VIA1_IER
   115                        
   116 00:0039: AD EE 7F                     lda     VIA2_IER                ; Disable active interrupts
   117 00:003C: 8D EE 7F                     sta     VIA2_IER
   118 00:003F: 58                           cli
   119                        
   120 00:0040: 4C xx xx                     jmp     Start                   ; Jump to the application start
   121                        
   122                        ;==============================================================================
   123                        ; Interrupt Handlers
   124                        ;------------------------------------------------------------------------------
   125                        
   126                        ; Handle IRQ and BRK interrupts in emulation mode.
   127                        ; -- Currently this code assumes only IRQs will occur
   128                        
   129                        IRQBRK:
   130 00:0043: 48                           pha                             ; Save callers registers
   131 00:0044: DA                           phx
   132 00:0045: 20 xx xx                     jsr     Service                 ; Service the hardware
   133 00:0048: FA                           plx                             ; Restore registers
   134 00:0049: 68                           pla
   135 00:004A: 40                           rti                             ; Done
   136                        
   137                        ; Handle NMI interrupts in emulation mode.
   138                        
   139                        NMIRQ:
   140 00:004B: 40                           rti
   141                        
   142                        ;------------------------------------------------------------------------------
  Mon Aug 17 2015 16:02                                                                                                    Page 7


   143                        
   144                        ; Handle IRQ interrupts in native mode.
   145                        
   146                        IRQ:
   147 00:004C: 48                           pha                             ; Save callers registers
   148 00:004D: DA                           phx
   149 00:004E: 5A                           phy
   150 00:004F: 08                           php                             ; Save current MX bits
   151                                        short_ai                        ; Make registers 8-bit
+  151 00:0050: E2 30                        sep     #(1<<M_FLAG)|(1<<X_FLAG)
+  151                                        longa   off
+  151                                        longi   off
   152 00:0052: 20 xx xx                     jsr     Service                 ; Service the hardware
   153 00:0055: 28                           plp                             ; Restore register widths
   154 00:0056: 7A                           ply                             ; .. and values
   155 00:0057: FA                           plx
   156 00:0058: 68                           pla
   157 00:0059: 40                           rti                             ; Done
   158                        
   159                        ; Handle IRQ interrupts in native mode.
   160                        
   161                        BRK:
   162 00:005A: 40                           rti                             ; Loop forever
   163                        
   164                        ; Handle IRQ interrupts in native mode.
   165                        
   166                        NMI:
   167 00:005B: 40                           rti
   168                        
   169                        ;------------------------------------------------------------------------------
   170                        
   171                        ; COP and ABORT interrupts are not handled.
   172                        
   173                        COP:
   174 00:005C: 80 FE                        bra     $                       ; Loop forever
   175                        
   176                        ABORT:
   177 00:005E: 80 FE                        bra     $                       ; Loop forever
   178                        
   179                        ;==============================================================================
   180                        ; Interrupt Servicing
   181                        ;------------------------------------------------------------------------------
   182                        
   183                        Service:
   184 00:0060: AD 81 7F                     lda     ACIA_SR                 ; Read ACIA status
   185 00:0063: 10 00                        bpl     ACIAHandled
   186                        
   187                        ACIAHandled:
   188                        
   189                        ;------------------------------------------------------------------------------
   190                        
   191 00:0065: AD CD 7F                     lda     VIA1_IFR                ; Is VIA1 the source?
   192 00:0068: 10 39                        bpl     VIA1Handled             ; No.
   193                        
   194 00:006A: 48                           pha
   195 00:006B: 29 40                        and     #%01000000              ; Is Timer1 the source?
   196 00:006D: F0 22                        beq     VIA1T1Handled           ; No
   197 00:006F: AD C4 7F                     lda     VIA1_T1CL               ; Clear the interrupt
  Mon Aug 17 2015 16:02                                                                                                    Page 8


   198                        
   199 00:0072: EE 01 02                     inc     JIFFY                   ; Bump jiffy counter
   200 00:0075: AD 01 02                     lda     JIFFY
   201 00:0078: C9 C8                        cmp     #TIMER_HZ               ; Reached a second?
   202 00:007A: D0 15                        bne     VIA1T1Handled           ; No.
   203                        
   204 00:007C: 9C 01 02                     stz     JIFFY                   ; Reset jiffy counter
   205 00:007F: EE 02 02                     inc     TIME+0                  ; And bump main timer
   206 00:0082: D0 0D                        bne     VIA1T1Handled
   207 00:0084: EE 03 02                     inc     TIME+1
   208 00:0087: D0 08                        bne     VIA1T1Handled
   209 00:0089: EE 04 02                     inc     TIME+2
   210 00:008C: D0 03                        bne     VIA1T1Handled
   211 00:008E: EE 05 02                     inc     TIME+3
   212                        VIA1T1Handled:
   213                        
   214 00:0091: 68                           pla                             ; Is Timer2 the source
   215 00:0092: 29 20                        and     #%00100000
   216 00:0094: F0 0D                        beq     VIA1T2Handled           ; No.
   217 00:0096: AD C8 7F                     lda     VIA1_T2CL               ; Clear the interrupt
   218                        
   219 00:0099: A9 20                        lda     #%00100000              ; Disable T2 interrupt
   220 00:009B: 8D CE 7F                     sta     VIA1_IER
   221 00:009E: A9 80                        lda     #TX_LOCK                ; Unlock TX hardware
   222 00:00A0: 1C 00 02                     trb     LOCKS
   223                        VIA1T2Handled:
   224                        
   225                        VIA1Handled:
   226                        
   227                        ;------------------------------------------------------------------------------
   228                        
   229 00:00A3: AD ED 7F                     lda     VIA2_IFR                ; Is VIA2 the source?
   230 00:00A6: 10 00                        bpl     VIA2Handled             ; No.
   231                        
   232                        VIA2Handled:
   233                        
   234                        ;------------------------------------------------------------------------------
   235                        
   236 00:00A8: 60                           rts                             ; Done
   237                        
   238                        ;==============================================================================
   239                        ; Buffered UART Interface
   240                        ;------------------------------------------------------------------------------
   241                        
   242                        ; Adds the characater in A to the transmit buffer and configure T2 for a one
   243                        ; shot interrupt when its transmission should be complete.
   244                        
   245                                        public  UartTx
   246                        UartTx:
   247 00:00A9: 48                           pha                             ; Save callers A
   248 00:00AA: 08                           php                             ; .. and MX bits
   249                                        short_a                         ; Ensure 8-bits
+  249 00:00AB: E2 20                        sep     #(1<<M_FLAG)
+  249                                        longa   off
   250 00:00AD: 48                           pha
   251 00:00AE: A9 80                        lda     #TX_LOCK                ; Try to obtain lock on
   252 00:00B0: 0C 00 02     TxWait:         tsb     LOCKS                   ; .. TX register
   253 00:00B3: D0 FB                        bne     TxWait                  ; Wait until gained
  Mon Aug 17 2015 16:02                                                                                                    Page 9


   254 00:00B5: 68                           pla
   255 00:00B6: 8D 80 7F                     sta     ACIA_TXD                ; Transmit the character
   256 00:00B9: A9 E8                        lda     #<TXD_COUNT             ; Load transmission oounter
   257 00:00BB: 8D C8 7F                     sta     VIA1_T2CL
   258 00:00BE: A9 11                        lda     #>TXD_COUNT
   259 00:00C0: 8D C9 7F                     sta     VIA1_T2CH
   260 00:00C3: A9 A0                        lda     #%10100000              ; And allow the interrupt
   261 00:00C5: 8D CE 7F                     sta     VIA1_IER
   262 00:00C8: 28                           plp                             ; Restore flags and A
   263 00:00C9: 68                           pla
   264 00:00CA: 60                           rts                             ; Done
   265                        
   266                        ; Fetch the next character from the RX buffer waiting for some to arrive if the
   267                        ; buffer is empty.
   268                        
   269                                        public  UartRx
   270                        UartRx:
   271 00:00CB: 08                           php                             ; Save current MX settings
   272                                        short_a                         ; .. and ensure 8-bits
+  272 00:00CC: E2 20                        sep     #(1<<M_FLAG)
+  272                                        longa   off
   273                        RxWait:
   274 00:00CE: AD 81 7F                     lda     ACIA_SR                 ; Any data in the RX buffer
   275 00:00D1: 29 08                        and     #$08
   276 00:00D3: F0 F9                        beq     RxWait                  ; No, wait for some
   277 00:00D5: AD 80 7F                     lda     ACIA_RXD                ; Recover the received data
   278 00:00D8: 28                           plp
   279 00:00D9: 60                           rts                             ; Done
   280                        
   281                        ;==============================================================================
   282                        ; Reset Vectors
   283                        ;------------------------------------------------------------------------------
   284                        
   285                        ShadowVectors   section offset $7ee0
   286                        
   287 00:7EE0:                              ds      4               ; Reserved
   288 00:7EE4: xx xx                        dw      COP             ; $FFE4 - COP(816)
   289 00:7EE6: xx xx                        dw      BRK             ; $FFE6 - BRK(816)
   290 00:7EE8: xx xx                        dw      ABORT           ; $FFE8 - ABORT(816)
   291 00:7EEA: xx xx                        dw      NMI             ; $FFEA - NMI(816)
   292 00:7EEC:                              ds      2               ; Reserved
   293 00:7EEE: xx xx                        dw      IRQ             ; $FFEE - IRQ(816)
   294                        
   295 00:7EF0:                              ds      4
   296 00:7EF4: xx xx                        dw      COP             ; $FFF4 - COP(C02)
   297 00:7EF6:                              ds      2               ; $Reserved
   298 00:7EF8: xx xx                        dw      ABORT           ; $FFF8 - ABORT(C02)
   299 00:7EFA: xx xx                        dw      NMIRQ           ; $FFFA - NMI(C02)
   300 00:7EFC: xx xx                        dw      RESET           ; $FFFC - RESET(C02)
   301 00:7EFE: xx xx                        dw      IRQBRK          ; $FFFE - IRQBRK(C02)
   302                        
   303 00:7F00:                              ends
   304                        
   305                        ;------------------------------------------------------------------------------
   306                        
   307                        Vectors         section offset $ffe0
   308                        
   309 00:FFE0:                              ds      4               ; Reserved
  Mon Aug 17 2015 16:02                                                                                                    Page 10


   310 00:FFE4: xx xx                        dw      COP             ; $FFE4 - COP(816)
   311 00:FFE6: xx xx                        dw      BRK             ; $FFE6 - BRK(816)
   312 00:FFE8: xx xx                        dw      ABORT           ; $FFE8 - ABORT(816)
   313 00:FFEA: xx xx                        dw      NMI             ; $FFEA - NMI(816)
   314 00:FFEC:                              ds      2               ; Reserved
   315 00:FFEE: xx xx                        dw      IRQ             ; $FFEE - IRQ(816)
   316                        
   317 00:FFF0:                              ds      4
   318 00:FFF4: xx xx                        dw      COP             ; $FFF4 - COP(C02)
   319 00:FFF6:                              ds      2               ; $Reserved
   320 00:FFF8: xx xx                        dw      ABORT           ; $FFF8 - ABORT(C02)
   321 00:FFFA: xx xx                        dw      NMIRQ           ; $FFFA - NMI(C02)
   322 00:FFFC: xx xx                        dw      RESET           ; $FFFC - RESET(C02)
   323 00:FFFE: xx xx                        dw      IRQBRK          ; $FFFE - IRQBRK(C02)
   324                        
   325 01:0000:                              ends
   326                        
   327                                        end


      Lines assembled: 534
      Errors: 0
