  Sun Aug 16 2015 23:19                                                                                                    Page 1


                                               ***************************************
                                               **      WDC 65C816 Macro Assembler   **
                                               **                                   **
                                               **     Version 3.49.1- Feb  6 2006    **
                                               ***************************************

     1                        ;==============================================================================
     2                        ; __        ____  ____   ____ ___  _  __  ______  ______
     3                        ; \ \      / / /_| ___| / ___( _ )/ |/ /_/ ___\ \/ / __ )
     4                        ;  \ \ /\ / / '_ \___ \| |   / _ \| | '_ \___ \\  /|  _ \
     5                        ;   \ V  V /| (_) |__) | |__| (_) | | (_) |__) /  \| |_) |
     6                        ;    \_/\_/  \___/____/ \____\___/|_|\___/____/_/\_\____/
     7                        ;
     8                        ; Basic Vector Handling for the W65C816SXB Development Board
     9                        ;------------------------------------------------------------------------------
    10                        ; Copyright (C)2015 HandCoded Software Ltd.
    11                        ; All rights reserved.
    12                        ;
    13                        ; This work is made available under the terms of the Creative Commons
    14                        ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    15                        ; following URL to see the details.
    16                        ;
    17                        ; http://creativecommons.org/licenses/by-nc-sa/4.0/
    18                        ;
    19                        ;==============================================================================
    20                        ; Notes:
    21                        ;
    22                        ; ACIA interrupts are used to handle recieved serial data but the silicon bug
    23                        ; prevents them from being used for transmission, instead a VIA timer is used
    24                        ; trigger periodic buffer checks and to start the transmission of any data.
    25                        ;
    26                        ;------------------------------------------------------------------------------
    27                        
    28                                        pw      132
    29                                        inclist on
    30                        
    31                                        chip    65816
    32                                        longi   off
    33                                        longa   off
    34                        
    35                                        include "w65c816.inc"
     1                        ;==============================================================================
     2                        ; __        ____  ____   ____ ___  _  __   
     3                        ; \ \      / / /_| ___| / ___( _ )/ |/ /_  
     4                        ;  \ \ /\ / / '_ \___ \| |   / _ \| | '_ \ 
     5                        ;   \ V  V /| (_) |__) | |__| (_) | | (_) |
     6                        ;    \_/\_/  \___/____/ \____\___/|_|\___/ 
     7                        ;
     8                        ; Western Design Center W65C816 device definitions                                          
     9                        ;------------------------------------------------------------------------------
    10                        
    11                        
    12                        ;==============================================================================
    13                        ; Status Register Bits
    14                        ;------------------------------------------------------------------------------
    15                        
    16             00000007   N_FLAG          equ     7
    17             00000006   V_FLAG          equ     6
  Sun Aug 16 2015 23:19                                                                                                    Page 2


    18             00000005   M_FLAG          equ     5
    19             00000004   X_FLAG          equ     4
    20             00000004   B_FLAG          equ     4
    21             00000003   D_FLAG          equ     3
    22             00000002   I_FLAG          equ     2
    23             00000001   Z_FLAG          equ     1
    24             00000000   C_FLAG          equ     0
    25                        
    26                        ;==============================================================================
    27                        ; Macros
    28                        ;------------------------------------------------------------------------------
    29                        
    30                        ; Puts the processor in emulation mode. A, X and Y become 8-bits and the stack
    31                        ; is fixed at $0100-$01ff. 
    32                        
    33                        emulate         macro
    34                                        sec
    35                                        xce
    36                                        endm
    37                        
    38                        ; Puts the processor in native mode. The size of the memory and index register
    39                        ; operations is not controlled by the M & X bits in the status register.
    40                        
    41                        native          macro
    42                                        clc
    43                                        xce
    44                                        endm
    45                        
    46                        ; Resets the M bit making the accumator and memory accesses 16-bits wide.
    47                         
    48                        long_a          macro
    49                                        rep     #(1<<M_FLAG)
    50                                        longa   on
    51                                        endm
    52                        
    53                        ; Resets the X bit making the index registers 16-bits wide
    54                        
    55                        long_i          macro
    56                                        rep     #(1<<X_FLAG)
    57                                        longi   on
    58                                        endm
    59                        
    60                        ; Resets the M and X bits making the accumator, memory accesses and index
    61                        ; registers 16-bits wide.
    62                                        
    63                        long_ai         macro
    64                                        rep     #(1<<M_FLAG)|(1<<X_FLAG)
    65                                        longa   on
    66                                        longi   on
    67                                        endm
    68                        
    69                        ; Sets the M bit making the accumator and memory accesses 16-bits wide.
    70                        
    71                        short_a         macro
    72                                        sep     #(1<<M_FLAG)
    73                                        longa   off
    74                                        endm
    75                        
  Sun Aug 16 2015 23:19                                                                                                    Page 3


    76                        short_i         macro
    77                                        sep     #(1<<X_FLAG)
    78                                        longi   off
    79                                        endm
    80                                        
    81                        short_ai        macro
    82                                        sep     #(1<<M_FLAG)|(1<<X_FLAG)
    83                                        longa   off
    84                                        longi   off
    85                                        endm
    36                                        include "w65c816sxb.inc"
     1                        ;==============================================================================
     2                        ; __        ____  ____   ____ ___  _  __  ______  ______
     3                        ; \ \      / / /_| ___| / ___( _ )/ |/ /_/ ___\ \/ / __ )
     4                        ;  \ \ /\ / / '_ \___ \| |   / _ \| | '_ \___ \\  /|  _ \
     5                        ;   \ V  V /| (_) |__) | |__| (_) | | (_) |__) /  \| |_) |
     6                        ;    \_/\_/  \___/____/ \____\___/|_|\___/____/_/\_\____/
     7                        ;
     8                        ; Western Design Center W65C816SXB Development Board Hardware Definitions
     9                        ;------------------------------------------------------------------------------
    10                        ; Copyright (C)2015 HandCoded Software Ltd.
    11                        ; All rights reserved.
    12                        ;
    13                        ; This work is made available under the terms of the Creative Commons
    14                        ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    15                        ; following URL to see the details.
    16                        ;
    17                        ; http://creativecommons.org/licenses/by-nc-sa/4.0/
    18                        ;
    19                        ;==============================================================================
    20                        ; Notes:
    21                        ;
    22                        ; All of the current stock of W65C51 ACIAs have a silicon bug that causes the
    23                        ; 'Transmit Data Register Empty' (TDRE) bit in the status register to be stuck
    24                        ; high making it impossible to tell when the transmitter is ready for the next
    25                        ; data byte.
    26                        ;
    27                        ;------------------------------------------------------------------------------
    28                        
    29             007A1200   OSC_FREQ        equ     8000000                 ; SXB runs at 8MHz
    30                        
    31                        ;==============================================================================
    32                        ; W65C51 ACIA
    33                        ;------------------------------------------------------------------------------
    34                        
    35             00007F80   ACIA_RXD        equ     $7f80
    36             00007F80   ACIA_TXD        equ     $7f80
    37             00007F81   ACIA_SR         equ     $7f81
    38             00007F82   ACIA_CMD        equ     $7f82
    39             00007F83   ACIA_CTL        equ     $7f83
    40                        
    41                        ;==============================================================================
    42                        ; W65C21 PIA
    43                        ;------------------------------------------------------------------------------
    44                        
    45             00007FA0   PIA_PIA         equ     $7fa0
    46             00007FA0   PIA_DDRA        equ     $7fa0
    47             00007FA1   PIA_CRA         equ     $7fa1
  Sun Aug 16 2015 23:19                                                                                                    Page 4


    48             00007FA2   PIA_PIB         equ     $7fa2
    49             00007FA2   PIA_DDRB        equ     $7fa2
    50             00007FA3   PIA_CRB         equ     $7fa3
    51                        
    52                        ;==============================================================================
    53                        ; W65C22 VIA
    54                        ;------------------------------------------------------------------------------
    55                        
    56             00007FC0   VIA1_ORB        equ     $7fc0
    57             00007FC0   VIA1_IRB        equ     $7fc0
    58             00007FC1   VIA1_ORA        equ     $7fc1
    59             00007FC1   VIA1_IRA        equ     $7fc1
    60             00007FC2   VIA1_DDRB       equ     $7fc2
    61             00007FC3   VIA1_DDRA       equ     $7fc3
    62             00007FC4   VIA1_T1CL       equ     $7fc4
    63             00007FC5   VIA1_T1CH       equ     $7fc5
    64             00007FC6   VIA1_T1LL       equ     $7fc6
    65             00007FC7   VIA1_T1LH       equ     $7fc7
    66             00007FC8   VIA1_T2CL       equ     $7fc8
    67             00007FC9   VIA1_T2CH       equ     $7fc9
    68             00007FCA   VIA1_SR         equ     $7fca
    69             00007FCB   VIA1_ACR        equ     $7fcb
    70             00007FCC   VIA1_PCR        equ     $7fcc
    71             00007FCD   VIA1_IFR        equ     $7fcd
    72             00007FCE   VIA1_IER        equ     $7fce
    73             00007FCF   VIA1_ORAN       equ     $7fcf
    74             00007FCF   VIA1_IRAN       equ     $7fcf
    75                        
    76                        ;------------------------------------------------------------------------------
    77                        
    78             00007FE0   VIA2_ORB        equ     $7fe0
    79             00007FE0   VIA2_IRB        equ     $7fe0
    80             00007FE1   VIA2_ORA        equ     $7fe1
    81             00007FE1   VIA2_IRA        equ     $7fe1
    82             00007FE2   VIA2_DDRB       equ     $7fe2
    83             00007FE3   VIA2_DDRA       equ     $7fe3
    84             00007FE4   VIA2_T1CL       equ     $7fe4
    85             00007FE5   VIA2_T1CH       equ     $7fe5
    86             00007FE6   VIA2_T1LL       equ     $7fe6
    87             00007FE7   VIA2_T1LH       equ     $7fe7
    88             00007FE8   VIA2_T2CL       equ     $7fe8
    89             00007FE9   VIA2_T2CH       equ     $7fe9
    90             00007FEA   VIA2_SR         equ     $7fea
    91             00007FEB   VIA2_ACR        equ     $7feb
    92             00007FEC   VIA2_PCR        equ     $7fec
    93             00007FED   VIA2_IFR        equ     $7fed
    94             00007FEE   VIA2_IER        equ     $7fee
    95             00007FEF   VIA2_ORAN       equ     $7fef
    96             00007FEF   VIA2_IRAN       equ     $7fef
    37                        
    38                        ;==============================================================================
    39                        ; Configuration
    40                        ;------------------------------------------------------------------------------
    41                        
    42             000003E8   TIMER_HZ        equ     1000
    43                        
    44             00004B00   BAUD_RATE       equ     19200
    45                        
  Sun Aug 16 2015 23:19                                                                                                    Page 5


    46             00000020   RX_SIZE         equ     32
    47             00000020   TX_SIZE         equ     32
    48                        
    49                        ;------------------------------------------------------------------------------
    50                        
    51             00001F40   TMR_COUNT       equ     OSC_FREQ/TIMER_HZ
    52                        
    53                                        if      TMR_COUNT&$ffff0000
    54                                        messg   "TMR_COUNT does not fit in 16-bits"
    55                                        endif
    56                        
    57             00001388   TXD_COUNT       equ     OSC_FREQ/(BAUD_RATE/12)
    58                        
    59                                        if      TXD_DELAY&$ffff0000
    60                                        messg   "TXD_DELAY does not fit in 16-bits"
    61                                        endif
    62                        
    63                        ;==============================================================================
    64                        ; Data Areas
    65                        ;------------------------------------------------------------------------------
    66                        
    67                                        data
    68                                        org     $200
    69                        
    70 00:0200:              LOCKS           ds      1
    71                        
    72             00000080   TX_LOCK         equ     $80
    73                        
    74                        ;------------------------------------------------------------------------------
    75                        
    76 00:0201:              ML              ds      1
    77 00:0202:              MH              ds      1
    78 00:0203:              SC              ds      1
    79 00:0204:              MN              ds      1
    80 00:0205:              HR              ds      1
    81                        
    82                        ;==============================================================================
    83                        ; Power On Reset
    84                        ;------------------------------------------------------------------------------
    85                        
    86                                        code
    87                                        extern  Start
    88                        RESET:
    89 00:0000: 9C 00 02                     stz     LOCKS                   ; Clear lock bits
    90                        
    91 00:0003: A9 1F                        lda     #%00011111              ; 8 bits, 1 stop bit, 19200 baud
    92 00:0005: 8D 83 7F                     sta     ACIA_CTL
    93 00:0008: A9 09                        lda     #%00001001              ; No parity, no interrupt
    94 00:000A: 8D 82 7F                     sta     ACIA_CMD
    95 00:000D: AD 80 7F                     lda     ACIA_RXD                ; Clear receive buffer
    96                        
    97 00:0010: AD CE 7F                     lda     VIA1_IER                ; Disable active interrupts
    98 00:0013: 8D CE 7F                     sta     VIA1_IER
    99 00:0016: A9 40                        lda     #%01000000              ; Configure VIA Timers
   100 00:0018: 8D CB 7F                     sta     VIA1_ACR
   101 00:001B: A9 40                        lda     #<TMR_COUNT             ; Set timer latches
   102 00:001D: 8D C4 7F                     sta     VIA1_T1CL
   103 00:0020: A9 1F                        lda     #>TMR_COUNT
  Sun Aug 16 2015 23:19                                                                                                    Page 6


   104 00:0022: 8D C5 7F                     sta     VIA1_T1CH
   105 00:0025: A9 C0                        lda     #%11000000              ; Enable Timer1 interrupt
   106 00:0027: 8D CE 7F                     sta     VIA1_IER
   107                        
   108 00:002A: AD EE 7F                     lda     VIA2_IER                ; Disable active interrupts
   109 00:002D: 8D EE 7F                     sta     VIA2_IER
   110 00:0030: 58                           cli
   111                                        native
+  111 00:0031: 18                           clc
+  111 00:0032: FB                           xce
   112                        
   113                        loop:
   114 00:0033: 20 xx xx                     jsr     UartRx
   115 00:0036: 20 xx xx                     jsr     UartTx
   116 00:0039: 80 F8                        bra     loop
   117                        
   118 00:003B: 4C xx xx                     jmp     Start                   ; Jump to the application start
   119                        
   120                        ;==============================================================================
   121                        ; Interrupt Handlers
   122                        ;------------------------------------------------------------------------------
   123                        
   124                        ; Handle IRQ and BRK interrupts in emulation mode.
   125                        ; -- Currently this code assumes only IRQs will occur
   126                        
   127                        IRQBRK:
   128 00:003E: 48                           pha                             ; Save callers registers
   129 00:003F: DA                           phx
   130 00:0040: 20 xx xx                     jsr     Service                 ; Service the hardware
   131 00:0043: FA                           plx                             ; Restore registers
   132 00:0044: 68                           pla
   133 00:0045: 40                           rti                             ; Done
   134                        
   135                        ; Handle NMI interrupts in emulation mode.
   136                        
   137                        NMIRQ:
   138 00:0046: 40                           rti
   139                        
   140                        ;------------------------------------------------------------------------------
   141                        
   142                        ; Handle IRQ interrupts in native mode.
   143                        
   144                        IRQ:
   145 00:0047: 48                           pha                             ; Save callers registers
   146 00:0048: DA                           phx
   147 00:0049: 08                           php
   148                                        short_ai                        ; Make registers 8-bit
+  148 00:004A: E2 30                        sep     #(1<<M_FLAG)|(1<<X_FLAG)
+  148                                        longa   off
+  148                                        longi   off
   149 00:004C: 20 xx xx                     jsr     Service                 ; Service the hardware
   150 00:004F: 28                           plp                             ; Restore register widths
   151 00:0050: FA                           plx                             ; .. and values
   152 00:0051: 68                           pla
   153 00:0052: 40                           rti                             ; Done
   154                        
   155                        ; Handle IRQ interrupts in native mode.
   156                        
  Sun Aug 16 2015 23:19                                                                                                    Page 7


   157                        BRK:
   158 00:0053: 40                           rti
   159                        
   160                        ; Handle IRQ interrupts in native mode.
   161                        
   162                        NMI:
   163 00:0054: 40                           rti
   164                        
   165                        ;------------------------------------------------------------------------------
   166                        
   167                        ; COP and ABORT interrupts are not handled.
   168                        
   169                        COP:
   170 00:0055: 80 FE                        bra     $                       ; Loop forever
   171                        
   172                        ABORT:
   173 00:0057: 80 FE                        bra     $                       ; Loop forever
   174                        
   175                        ;==============================================================================
   176                        ; Interrupt Servicing
   177                        ;------------------------------------------------------------------------------
   178                        
   179                        Service:
   180 00:0059: AD 81 7F     		lda	ACIA_SR
   181 00:005C: 8D F0 00     		sta	$f0
   182 00:005F: AD CD 7F     		lda	VIA1_IFR
   183 00:0062: 8D F1 00     		sta	$f1
   184 00:0065: AD CE 7F     		lda	VIA1_IER
   185 00:0068: 8D F2 00     		sta	$f2
   186 00:006B: AD ED 7F     		lda	VIA2_IFR
   187 00:006E: 8D F3 00     		sta	$f3
   188 00:0071: AD EE 7F     		lda	VIA2_IER
   189 00:0074: 8D F4 00     		sta	$f4
   190                        
   191 00:0077: AD CD 7F                     lda     VIA1_IFR                ; Is VIA1 the source?
   192 00:007A: 30 03                        bmi     $+5
   193 00:007C: 4C xx xx                     jmp     VIA1Handled             ; No.
   194                        		
   195 00:007F: EE F6 00     		inc	$f6
   196                        
   197 00:0082: 29 40                        and     #%01000000              ; Is Timer1 the source?
   198 00:0084: F0 4D                        beq     VIA1T1Handled           ; No
   199 00:0086: AD C4 7F                     lda	VIA1_T1CL               ; Clear the interrupt
   200                        
   201 00:0089: EE F7 00     		inc	$f7
   202                        		
   203 00:008C: F8                           sed
   204 00:008D: 38                           sec
   205 00:008E: AD 01 02                     lda     ML                      ; Bump lo milliseconds
   206 00:0091: 69 00                        adc     #0
   207 00:0093: 8D 01 02                     sta     ML
   208 00:0096: 90 3A                        bcc     TimeUpdated
   209 00:0098: AD 02 02                     lda     MH                      ; Bump hi milliseconds
   210 00:009B: 69 00                        adc     #0
   211 00:009D: 8D 02 02                     sta     MH
   212 00:00A0: 90 30                        bcc     TimeUpdated
   213 00:00A2: AD 03 02                     lda     SC                      ; Bump seconds
   214 00:00A5: 69 00                        adc     #0
  Sun Aug 16 2015 23:19                                                                                                    Page 8


   215 00:00A7: C9 60                        cmp     #$60
   216 00:00A9: D0 02                        bne     $+4
   217 00:00AB: A9 00                        lda     #0
   218 00:00AD: 8D 03 02                     sta     SC
   219 00:00B0: 90 20                        bcc     TimeUpdated
   220 00:00B2: AD 04 02                     lda     MN                      ; Bump minutes
   221 00:00B5: 69 00                        adc     #0
   222 00:00B7: C9 60                        cmp     #$60
   223 00:00B9: D0 02                        bne     $+4
   224 00:00BB: A9 00                        lda     #0
   225 00:00BD: 8D 04 02                     sta     MN
   226 00:00C0: 90 10                        bcc     TimeUpdated
   227 00:00C2: AD 05 02                     lda     HR                      ; Bump hours
   228 00:00C5: 69 00                        adc     #0
   229 00:00C7: C9 60                        cmp     #$60
   230 00:00C9: D0 02                        bne     $+4
   231 00:00CB: A9 00                        lda     #0
   232 00:00CD: 8D 05 02                     sta     HR
   233 00:00D0: 90 00                        bcc     TimeUpdated
   234                                        ; TODO: Bump the rest of the time
   235                        TimeUpdated:
   236 00:00D2: D8                           cld
   237                        VIA1T1Handled:
   238                        
   239 00:00D3: AD CD 7F                     lda     VIA1_IFR                ; Is Timer2 the source
   240 00:00D6: 29 20                        and     #%00100000
   241 00:00D8: F0 08                        beq     VIA1T2Handled           ; No.
   242 00:00DA: AD C8 7F                     lda	VIA1_T2CL               ; Clear the interrupt
   243                        
   244 00:00DD: A9 80                        lda     #TX_LOCK                ; Lock TX hardware
   245 00:00DF: 1C 00 02                     trb     LOCKS
   246                        VIA1T2Handled:
   247                        VIA1Handled:
   248                        
   249                        ;------------------------------------------------------------------------------
   250                        
   251                        VIA2Handled:
   252 00:00E2: 60                           rts                             ; Done
   253                        
   254                        ;------------------------------------------------------------------------------
   255                        
   256 00:00E3: 00 31 28 31  NORM_DAYS:      db      $00,$31,$28,$31,$30,$31,$30,$31
       00:00E7: 30 31 30 31 
   257 00:00EB: 31 30 00 00                  db      $31,$30,$00,$00,$00,$00,$00,$00
       00:00EF: 00 00 00 00 
   258 00:00F3: 31 30 31                     db      $31,$30,$31
   259                        
   260 00:00F6: 00 31 29 31  LEAP_DAYS:      db      $00,$31,$29,$31,$30,$31,$30,$31
       00:00FA: 30 31 30 31 
   261 00:00FE: 31 30 00 00                  db      $31,$30,$00,$00,$00,$00,$00,$00
       00:0102: 00 00 00 00 
   262 00:0106: 31 30 31                     db      $31,$30,$31
   263                        
   264                        ;==============================================================================
   265                        ; Buffered UART Interface
   266                        ;------------------------------------------------------------------------------
   267                        
   268                        ; Adds the characater in A to the transmit buffer and change the ACIA settings
  Sun Aug 16 2015 23:19                                                                                                    Page 9


   269                        ; to enable a transmit interrupt when its is ready to send.
   270                        
   271                                        public  UartTx
   272                        UartTx:
   273 00:0109: 48                           pha                             ; Save callers A
   274 00:010A: 08                           php                             ; .. and MX bits
   275                                        short_a                         ; Ensure 8-bits
+  275 00:010B: E2 20                        sep     #(1<<M_FLAG)
+  275                                        longa   off
   276 00:010D: 48                           pha
   277 00:010E: A9 80                        lda     #TX_LOCK                ; Wait if TX operation
   278 00:0110: 2C 00 02     TxWait:         bit     LOCKS                   ; .. is still on going
   279 00:0113: D0 FB                        bne     TxWait
   280 00:0115: 0C 00 02                     tsb     LOCKS                   ; Mark TX as in use
   281 00:0118: 68                           pla
   282 00:0119: 8D 80 7F                     sta     ACIA_TXD                ; Transmit the character
   283 00:011C: A9 88                        lda     #<TXD_COUNT             ; Load transmission oounter
   284 00:011E: 8D C8 7F                     sta     VIA1_T2CL
   285 00:0121: A9 13                        lda     #>TXD_COUNT
   286 00:0123: 8D C9 7F                     sta     VIA1_T2CH
   287 00:0126: A9 A0                        lda     #%10100000              ; And allow the interrupt
   288 00:0128: 8D CE 7F                     sta     VIA1_IER
   289 00:012B: 28                           plp                             ; Restore flags and A
   290 00:012C: 68                           pla
   291 00:012D: 60                           rts                             ; Done
   292                        
   293                        ; Fetch the next character from the RX buffer waiting for some to arrive if the
   294                        ; buffer is empty.
   295                        
   296                                        public  UartRx
   297                        UartRx:
   298 00:012E: 08                           php                             ; Save current MX settings
   299                                        short_a                         ; .. and ensure 8-bits
+  299 00:012F: E2 20                        sep     #(1<<M_FLAG)
+  299                                        longa   off
   300                        RxWait:
   301 00:0131: AD 81 7F                     lda     ACIA_SR
   302 00:0134: 29 08                        and     #$08
   303 00:0136: F0 F9                        beq     RxWait
   304 00:0138: AD 80 7F                     lda     ACIA_RXD
   305 00:013B: 28                           plp
   306 00:013C: 60                           rts
   307                        
   308                        ;==============================================================================
   309                        ; Reset Vectors
   310                        ;------------------------------------------------------------------------------
   311                        
   312                        ShadowVectors   section offset $7ee0
   313                        
   314 00:7EE0:                              ds      4               ; Reserved
   315 00:7EE4: xx xx                        dw      COP             ; $FFE4 - COP(816)
   316 00:7EE6: xx xx                        dw      BRK             ; $FFE6 - BRK(816)
   317 00:7EE8: xx xx                        dw      ABORT           ; $FFE8 - ABORT(816)
   318 00:7EEA: xx xx                        dw      NMI             ; $FFEA - NMI(816)
   319 00:7EEC:                              ds      2               ; Reserved
   320 00:7EEE: xx xx                        dw      IRQ             ; $FFEE - IRQ(816)
   321                        
   322 00:7EF0:                              ds      4
  Sun Aug 16 2015 23:19                                                                                                    Page 10


   323 00:7EF4: xx xx                        dw      COP             ; $FFF4 - COP(C02)
   324 00:7EF6:                              ds      2               ; $Reserved
   325 00:7EF8: xx xx                        dw      ABORT           ; $FFF8 - ABORT(C02)
   326 00:7EFA: xx xx                        dw      NMIRQ           ; $FFFA - NMI(C02)
   327 00:7EFC: xx xx                        dw      RESET           ; $FFFC - RESET(C02)
   328 00:7EFE: xx xx                        dw      IRQBRK          ; $FFFE - IRQBRK(C02)
   329                        
   330 00:7F00:                              ends
   331                        
   332                        ;------------------------------------------------------------------------------
   333                        
   334                        Vectors         section offset $ffe0
   335                        
   336 00:FFE0:                              ds      4               ; Reserved
   337 00:FFE4: xx xx                        dw      COP             ; $FFE4 - COP(816)
   338 00:FFE6: xx xx                        dw      BRK             ; $FFE6 - BRK(816)
   339 00:FFE8: xx xx                        dw      ABORT           ; $FFE8 - ABORT(816)
   340 00:FFEA: xx xx                        dw      NMI             ; $FFEA - NMI(816)
   341 00:FFEC:                              ds      2               ; Reserved
   342 00:FFEE: xx xx                        dw      IRQ             ; $FFEE - IRQ(816)
   343                        
   344 00:FFF0:                              ds      4
   345 00:FFF4: xx xx                        dw      COP             ; $FFF4 - COP(C02)
   346 00:FFF6:                              ds      2               ; $Reserved
   347 00:FFF8: xx xx                        dw      ABORT           ; $FFF8 - ABORT(C02)
   348 00:FFFA: xx xx                        dw      NMIRQ           ; $FFFA - NMI(C02)
   349 00:FFFC: xx xx                        dw      RESET           ; $FFFC - RESET(C02)
   350 00:FFFE: xx xx                        dw      IRQBRK          ; $FFFE - IRQBRK(C02)
   351                        
   352 01:0000:                              ends
   353                        
   354                                        end


      Lines assembled: 544
      Errors: 0
