  Sat Aug  8 2015 20:50                                                                                                    Page 1


                                               ***************************************
                                               **      WDC 65C816 Macro Assembler   **
                                               **                                   **
                                               **     Version 3.49.1- Feb  6 2006    **
                                               ***************************************

     1                        ;==============================================================================
     2                        ; __        ____  ____   ____ ___  _  __  ______  ______
     3                        ; \ \      / / /_| ___| / ___( _ )/ |/ /_/ ___\ \/ / __ )
     4                        ;  \ \ /\ / / '_ \___ \| |   / _ \| | '_ \___ \\  /|  _ \
     5                        ;   \ V  V /| (_) |__) | |__| (_) | | (_) |__) /  \| |_) |
     6                        ;    \_/\_/  \___/____/ \____\___/|_|\___/____/_/\_\____/
     7                        ;
     8                        ; Basic Vector Handling for the W65C816SXB Development Board
     9                        ;------------------------------------------------------------------------------
    10                        ; Notes:
    11                        ;
    12                        ;==============================================================================
    13                        ;------------------------------------------------------------------------------
    14                        
    15                                        pw      132
    16                                        inclist on
    17                        
    18                                        chip    65816
    19                                        longi   off
    20                                        longa   off
    21                        
    22                                        include "w65c816.inc"
     1                        ;==============================================================================
     2                        ; __        ____  ____   ____ ___  _  __   
     3                        ; \ \      / / /_| ___| / ___( _ )/ |/ /_  
     4                        ;  \ \ /\ / / '_ \___ \| |   / _ \| | '_ \ 
     5                        ;   \ V  V /| (_) |__) | |__| (_) | | (_) |
     6                        ;    \_/\_/  \___/____/ \____\___/|_|\___/ 
     7                        ;
     8                        ; Western Design Center W65C816 device definitions                                          
     9                        ;------------------------------------------------------------------------------
    10                        
    11                        
    12                        ;==============================================================================
    13                        ; Status Register Bits
    14                        ;------------------------------------------------------------------------------
    15                        
    16             00000007   N_FLAG		equ		7
    17             00000006   V_FLAG		equ		6
    18             00000005   M_FLAG		equ		5
    19             00000004   X_FLAG		equ		4
    20             00000004   B_FLAG		equ		4
    21             00000003   D_FLAG		equ		3
    22             00000002   I_FLAG		equ		2
    23             00000001   Z_FLAG		equ		1
    24             00000000   C_FLAG		equ		0
    25                        
    26                        ;==============================================================================
    27                        ; Macros
    28                        ;------------------------------------------------------------------------------
    29                        
    30                        ; Puts the processor in emulation mode. A, X and Y become 8-bits and the stack
  Sat Aug  8 2015 20:50                                                                                                    Page 2


    31                        ; is fixed at $0100-$01ff. 
    32                        
    33                        emulate         macro
    34                                        sec
    35                                        xce
    36                                        endm
    37                        
    38                        ; Puts the processor in native mode. The size of the memory and index register
    39                        ; operations is not controlled by the M & X bits in the status register.
    40                        
    41                        native          macro
    42                                        clc
    43                                        xce
    44                                        endm
    45                        
    46                        ; Resets the M bit making the accumator and memory accesses 16-bits wide.
    47                         
    48                        long_a          macro
    49                                        rep     #(1<<M_FLAG)
    50                                        longa   on
    51                                        endm
    52                        
    53                        ; Resets the X bit making the index registers 16-bits wide
    54                        
    55                        long_i          macro
    56                                        rep     #(1<<X_FLAG)
    57                                        longi   on
    58                                        endm
    59                        
    60                        ; Resets the M and X bits making the accumator, memory accesses and index
    61                        ; registers 16-bits wide.
    62                                        
    63                        long_ai         macro
    64                                        rep     #(1<<M_FLAG)|(1<<X_FLAG)
    65                                        longa   on
    66                                        longi   on
    67                                        endm
    68                        
    69                        ; Sets the M bit making the accumator and memory accesses 16-bits wide.
    70                        
    71                        short_a         macro
    72                                        sep     #(1<<M_FLAG)
    73                                        longa   off
    74                                        endm
    75                        
    76                        short_i         macro
    77                                        sep     #(1<<X_FLAG)
    78                                        longi   off
    79                                        endm
    80                                        
    81                        short_ai        macro
    82                                        rep     #(1<<M_FLAG)|(1<<X_FLAG)
    83                                        longa   off
    84                                        longi   off
    85                                        endm
    23                                        include "w65c816sxb.inc"
     1                        ;==============================================================================
     2                        ; __        ____  ____   ____ ___  _  __  ______  ______  
  Sat Aug  8 2015 20:50                                                                                                    Page 3


     3                        ; \ \      / / /_| ___| / ___( _ )/ |/ /_/ ___\ \/ / __ ) 
     4                        ;  \ \ /\ / / '_ \___ \| |   / _ \| | '_ \___ \\  /|  _ \ 
     5                        ;   \ V  V /| (_) |__) | |__| (_) | | (_) |__) /  \| |_) |
     6                        ;    \_/\_/  \___/____/ \____\___/|_|\___/____/_/\_\____/ 
     7                        ;                                                         
     8                        ; Western Design Center W65C816SXB Development Board Hardware Definitions
     9                        ;------------------------------------------------------------------------------
    10                        
    11                        ;==============================================================================
    12                        ; W65C51 ACIA
    13                        ;------------------------------------------------------------------------------
    14                        
    15             00007F80   ACIA_RXD        equ     $7f80
    16             00007F80   ACIA_TXD        equ     $7f80
    17             00007F81   ACIA_SR         equ     $7f81
    18             00007F82   ACIA_CMD        equ     $7f82
    19             00007F83   ACIA_CTL        equ     $7f83
    24                        
    25                        ;==============================================================================
    26                        ; Configuration
    27                        ;------------------------------------------------------------------------------
    28                        
    29                        
    30             00000020   RX_SIZE         equ     32
    31             00000020   TX_SIZE         equ     32
    32                        
    33                        ;==============================================================================
    34                        ; Data Areas
    35                        ;------------------------------------------------------------------------------
    36                        
    37                                        page0
    38                                        org     $f8
    39                        
    40                        
    41                                        data
    42                                        org     $200
    43                        
    44 00:0200:              COPV            ds      2
    45 00:0202:              BRKV            ds      2
    46                        
    47 00:0204:              TX_HEAD         ds      1
    48 00:0205:              TX_TAIL         ds      1
    49 00:0206:              RX_HEAD         ds      1
    50 00:0207:              RX_TAIL         ds      1
    51                        
    52 00:0208:              TX_BUFF         ds      TX_SIZE
    53 00:0228:              RX_BUFF         ds      RX_SIZE
    54                        
    55                        ;==============================================================================
    56                        ;
    57                        ;------------------------------------------------------------------------------
    58                        
    59                                        code
    60                                        extern  START
    61                        RESET:
    62 00:0000: 9C 04 02                     stz     TX_HEAD                 ; Reset the TX and RX buffer
    63 00:0003: 9C 05 02                     stz     TX_TAIL                 ; .. indexes
    64 00:0006: 9C 06 02                     stz     RX_HEAD
  Sat Aug  8 2015 20:50                                                                                                    Page 4


    65 00:0009: 9C 07 02                     stz     RX_TAIL
    66                        
    67 00:000C: A9 1F                        lda     #%00011111              ; 8 bits, 1 stop bit, 19200 baud
    68 00:000E: 8D 83 7F                     sta     ACIA_CTL
    69 00:0011: A9 09                        lda     #%00001001              ; No parity, no interrupt
    70 00:0013: 8D 82 7F                     sta     ACIA_CMD
    71 00:0016: AD 80 7F                     lda     ACIA_RXD                ; Clear receive buffer
    72 00:0019: AD 80 7F                     lda     ACIA_RXD
    73                        
    74 00:001C: 58                           cli
    75                        
    76                        loop:
    77 00:001D: 20 xx xx                     jsr     UART_RX
    78 00:0020: 20 xx xx                     jsr     UART_TX
    79 00:0023: 80 F8                        bra     loop
    80                        
    81 00:0025: 4C xx xx                     jmp     START                   ; Jump to the application start
    82                        
    83                        ;==============================================================================
    84                        ; Interrupt Handlers
    85                        ;------------------------------------------------------------------------------
    86                        
    87                        ; Handle IRQ and BRK interrupts in emulation mode.
    88                        ; -- Currently this code assumes only IRQs will occur
    89                        
    90                        IRQBRK:
    91 00:0028: 48                           pha                             ; Save callers registers
    92 00:0029: DA                           phx
    93 00:002A: 20 xx xx                     jsr     SERVICE                 ; Service the hardware
    94 00:002D: FA                           plx                             ; Restore registers
    95 00:002E: 68                           pla
    96 00:002F: 40                           rti                             ; Done
    97                        
    98                        ; Handle NMI interrupts in emulation mode.
    99                        
   100                        NMIRQ:
   101 00:0030: 40                           rti
   102                        
   103                        ;------------------------------------------------------------------------------
   104                        
   105                        ; Handle IRQ interrupts in native mode.
   106                        
   107                        IRQ:
   108 00:0031: 48                           pha                             ; Save callers registers
   109 00:0032: DA                           phx
   110 00:0033: 08                           php
   111                                        short_ai                        ; Make registers 8-bit
+  111 00:0034: C2 30                        rep     #(1<<M_FLAG)|(1<<X_FLAG)
+  111                                        longa   off
+  111                                        longi   off
   112 00:0036: 20 xx xx                     jsr     SERVICE                 ; Service the hardware
   113 00:0039: 28                           plp                             ; Restore register widths
   114 00:003A: FA                           plx                             ; .. and values
   115 00:003B: 68                           pla
   116 00:003C: 40                           rti                             ; Done
   117                        
   118                        ; Handle IRQ interrupts in native mode.
   119                        
  Sat Aug  8 2015 20:50                                                                                                    Page 5


   120                        BRK:
   121 00:003D: 40                           rti
   122                        
   123                        ; Handle IRQ interrupts in native mode.
   124                        
   125                        NMI:
   126 00:003E: 40                           rti
   127                        
   128                        ;------------------------------------------------------------------------------
   129                        
   130                        ; COP and ABORT interrupts are not handled.
   131                        
   132                        COP:
   133 00:003F: 80 FE                        bra     $                       ; Loop forever
   134                        
   135                        ABORT:
   136 00:0041: 80 FE                        bra     $                       ; Loop forever
   137                        
   138                        ;==============================================================================
   139                        ; Interrup Servicing
   140                        ;------------------------------------------------------------------------------
   141                        
   142                        SERVICE:
   143 00:0043: AD 81 7F                     lda     ACIA_SR                 ; Is the ACIA the source?
   144 00:0046: 10 35                        bpl     ACIA_HANDLED            ; No, try next device
   145 00:0048: 29 08                        and     #$08                    ; Check if RX interrupt
   146 00:004A: D0 1D                        bne     ACIA_RX                 ; Yes, it is
   147                        ACIA_TX:
   148 00:004C: AE 04 02                     ldx     TX_HEAD                 ; Get the head index
   149 00:004F: EC 05 02                     cpx     TX_TAIL                 ; Is the transmit buffer empty?
   150 00:0052: F0 0E                        beq     TX_EMPTY
   151 00:0054: BD 08 02                     lda     TX_BUFF,x               ; Fetch next character
   152 00:0057: 8D 80 7F                     sta     ACIA_TXD                ; .. and transmit
   153 00:005A: 20 xx xx                     jsr     BUMP_TX                 ; Update the head index
   154 00:005D: 8E 04 02                     stx     TX_HEAD
   155 00:0060: 80 1B                        bra     ACIA_HANDLED            ; Done
   156                        
   157                        TX_EMPTY:
   158 00:0062: A9 09                        lda     #%00001001              ; Turn TX interrupts off
   159 00:0064: 8D 82 7F                     sta     ACIA_CMD
   160 00:0067: 80 14                        bra     ACIA_HANDLED            ; Done
   161                        
   162                        ACIA_RX:
   163 00:0069: AD 80 7F                     lda     ACIA_RXD
   164 00:006C: AE 07 02                     ldx     RX_TAIL                 ; Save the new character
   165 00:006F: 9D 28 02                     sta     RX_BUFF,x
   166 00:0072: 20 xx xx                     jsr     BUMP_RX                 ; Bump tail index
   167 00:0075: EC 06 02                     cpx     RX_HEAD                 ; Is the receive buffer full?
   168 00:0078: F0 03                        beq     ACIA_HANDLED            ; Yes, drop the character
   169 00:007A: 8E 07 02                     stx     RX_TAIL                 ; No, update the tail
   170                        ACIA_HANDLED:
   171                        
   172                        ;------------------------------------------------------------------------------
   173                        
   174                        PIA_HANDLED:
   175                        VIA1_HANDLED:
   176                        VIA2_HANDLED:
   177 00:007D: 60                           rts                             ; Done
  Sat Aug  8 2015 20:50                                                                                                    Page 6


   178                        
   179                        ;==============================================================================
   180                        ; Buffered UART Interface
   181                        ;------------------------------------------------------------------------------
   182                        
   183                        ; Adds the characater in A to the transmit buffer and change the ACIA settings
   184                        ; to enable a transmit interrupt when its is ready to send.
   185                        
   186                                        public  UART_TX
   187                        UART_TX:
   188 00:007E: 48                           pha                             ; Save callers registers
   189 00:007F: DA                           phx
   190 00:0080: 08                           php                             ; Save current MX settings
   191                                        short_ai                        ; .. and ensure 8-bits
+  191 00:0081: C2 30                        rep     #(1<<M_FLAG)|(1<<X_FLAG)
+  191                                        longa   off
+  191                                        longi   off
   192 00:0083: AE 05 02                     ldx     TX_TAIL                 ; Save the character
   193 00:0086: 9D 08 02                     sta     TX_BUFF,x
   194 00:0089: 20 xx xx                     jsr     BUMP_TX                 ; Bump the tail index
   195 00:008C: EC 04 02     TX_WAIT:        cpx     TX_HEAD                 ; Wait until save to update
   196 00:008F: F0 FB                        beq     TX_WAIT                 ; .. the tail index
   197 00:0091: 8E 05 02                     stx     TX_TAIL
   198 00:0094: A9 05                        lda     #%00000101              ; Enable transmit interrupt
   199 00:0096: 8D 82 7F                     sta     ACIA_CMD
   200 00:0099: 28                           plp                             ; Restore flags
   201 00:009A: FA                           plx                             ; .. and registers
   202 00:009B: 68                           pla
   203 00:009C: 60                           rts                             ; Done
   204                        
   205                        ; Fetch the next character from the RX buffer waiting for some to arrive if the
   206                        ; buffer is empty.
   207                        
   208                                        public  UART_RX
   209                        UART_RX:
   210 00:009D: DA                           phx                             ; Save callers X
   211 00:009E: 08                           php                             ; Save current MX settings
   212                                        short_ai                        ; .. and ensure 8-bits
+  212 00:009F: C2 30                        rep     #(1<<M_FLAG)|(1<<X_FLAG)
+  212                                        longa   off
+  212                                        longi   off
   213 00:00A1: AE 06 02                     ldx     RX_HEAD                 ; Load head index
   214 00:00A4: EC 07 02     RX_WAIT:        cpx     RX_TAIL                 ; Any data in the buffer?
   215 00:00A7: F0 FB                        beq     RX_WAIT                 ; No, wait for some
   216 00:00A9: BD 28 02                     lda     RX_BUFF,x               ; Yes, fetch it
   217 00:00AC: 20 xx xx                     jsr     BUMP_RX                 ; Update head index
   218 00:00AF: 8E 06 02                     stx     RX_HEAD
   219 00:00B2: 28                           plp                             ; Restore flags
   220 00:00B3: FA                           plx                             ; .. and X
   221 00:00B4: 60                           rts                             ; Done
   222                        
   223                        ; Increment the transmit buffer index in X and wrap it back to zero if it
   224                        ; goes past the end.
   225                        
   226                        BUMP_TX:
   227 00:00B5: E8                           inx                             ; Bump the TX index
   228 00:00B6: E0 20                        cpx     #TX_SIZE                ; Reached the limit?
   229 00:00B8: D0 02                        bne     $+4                     ; No
  Sat Aug  8 2015 20:50                                                                                                    Page 7


   230 00:00BA: A2 00                        ldx     #0                      ; Yes, wrap around
   231 00:00BC: 60                           rts                             ; Done
   232                        
   233                        ; Increment the recieve buffer index in X and wrap it back to zero if it
   234                        ; goes past the end.
   235                        
   236                        BUMP_RX:
   237 00:00BD: E8                           inx                             ; Bump the RX index
   238 00:00BE: E0 20                        cpx     #RX_SIZE                ; Reached the limit?
   239 00:00C0: D0 02                        bne     $+4                     ; No
   240 00:00C2: A2 00                        ldx     #0                      ; Yes, wrap around
   241 00:00C4: 60                           rts                             ; Done
   242                        
   243                        ;==============================================================================
   244                        ; Reset Vectors
   245                        ;------------------------------------------------------------------------------
   246                        
   247                        ShadowVectors   section offset $7ee0
   248                        
   249 00:7EE0:                              ds      4               ; Reserved
   250 00:7EE4: xx xx                        dw      COP             ; $FFE4 - COP(816)
   251 00:7EE6: xx xx                        dw      BRK             ; $FFE6 - BRK(816)
   252 00:7EE8: xx xx                        dw      ABORT           ; $FFE8 - ABORT(816)
   253 00:7EEA: xx xx                        dw      NMI             ; $FFEA - NMI(816)
   254 00:7EEC:                              ds      2               ; Reserved
   255 00:7EEE: xx xx                        dw      IRQ             ; $FFEE - IRQ(816)
   256                        
   257 00:7EF0:                              ds      4
   258 00:7EF4: xx xx                        dw      COP             ; $FFF4 - COP(C02)
   259 00:7EF6:                              ds      2               ; $Reserved
   260 00:7EF8: xx xx                        dw      ABORT           ; $FFF8 - ABORT(C02)
   261 00:7EFA: xx xx                        dw      NMIRQ           ; $FFFA - NMI(C02)
   262 00:7EFC: xx xx                        dw      RESET           ; $FFFC - RESET(C02)
   263 00:7EFE: xx xx                        dw      IRQBRK          ; $FFFE - IRQBRK(C02)
   264                        
   265 00:7F00:                              ends
   266                        
   267                        ;------------------------------------------------------------------------------
   268                        
   269                        Vectors         section offset $ffe0
   270                        
   271 00:FFE0:                              ds      4               ; Reserved
   272 00:FFE4: xx xx                        dw      COP             ; $FFE4 - COP(816)
   273 00:FFE6: xx xx                        dw      BRK             ; $FFE6 - BRK(816)
   274 00:FFE8: xx xx                        dw      ABORT           ; $FFE8 - ABORT(816)
   275 00:FFEA: xx xx                        dw      NMI             ; $FFEA - NMI(816)
   276 00:FFEC:                              ds      2               ; Reserved
   277 00:FFEE: xx xx                        dw      IRQ             ; $FFEE - IRQ(816)
   278                        
   279 00:FFF0:                              ds      4
   280 00:FFF4: xx xx                        dw      COP             ; $FFF4 - COP(C02)
   281 00:FFF6:                              ds      2               ; $Reserved
   282 00:FFF8: xx xx                        dw      ABORT           ; $FFF8 - ABORT(C02)
   283 00:FFFA: xx xx                        dw      NMIRQ           ; $FFFA - NMI(C02)
   284 00:FFFC: xx xx                        dw      RESET           ; $FFFC - RESET(C02)
   285 00:FFFE: xx xx                        dw      IRQBRK          ; $FFFE - IRQBRK(C02)
   286                        
   287 01:0000:                              ends
  Sat Aug  8 2015 20:50                                                                                                    Page 8


   288                        
   289                                        end


      Lines assembled: 402
      Errors: 0
