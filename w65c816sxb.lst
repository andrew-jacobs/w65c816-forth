  Thu Nov 19 2015 21:53                                                                                                    Page 1


                                               ***************************************
                                               **      WDC 65C816 Macro Assembler   **
                                               **                                   **
                                               **     Version 3.49.1- Feb  6 2006    **
                                               ***************************************

     1                        ;==============================================================================
     2                        ; __        ____  ____   ____ ___  _  __  ______  ______
     3                        ; \ \      / / /_| ___| / ___( _ )/ |/ /_/ ___\ \/ / __ )
     4                        ;  \ \ /\ / / '_ \___ \| |   / _ \| | '_ \___ \\  /|  _ \
     5                        ;   \ V  V /| (_) |__) | |__| (_) | | (_) |__) /  \| |_) |
     6                        ;    \_/\_/  \___/____/ \____\___/|_|\___/____/_/\_\____/
     7                        ;
     8                        ; Basic Vector Handling for the W65C816SXB Development Board
     9                        ;------------------------------------------------------------------------------
    10                        ; Copyright (C)2015 HandCoded Software Ltd.
    11                        ; All rights reserved.
    12                        ;
    13                        ; This work is made available under the terms of the Creative Commons
    14                        ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    15                        ; following URL to see the details.
    16                        ;
    17                        ; http://creativecommons.org/licenses/by-nc-sa/4.0/
    18                        ;
    19                        ;==============================================================================
    20                        ; Notes:
    21                        ;
    22                        ; This code does not use ACIA interrupts directly by the status register is
    23                        ; still checked in the interrupt handler. In testing I found that ACIA would
    24                        ; not work it it was not regularly polled.
    25                        ;
    26                        ; A software semaphore cleared by a one short timer (VIA1 T2) is used to work
    27                        ; around the ACIA transmission silicon bug.
    28                        ;
    29                        ; TODO:
    30                        ;
    31                        ; No support for BRK in emulation mode.
    32                        ; Improve data memory bank handling.
    33                        ;
    34                        ;------------------------------------------------------------------------------
    35                        
    36                                        pw      132
    37                                        inclist on
    38                        
    39                                        chip    65816
    40                                        longi   off
    41                                        longa   off
    42                        
    43                                        include "w65c816.inc"
     1                        ;==============================================================================
     2                        ; __        ____  ____   ____ ___  _  __   
     3                        ; \ \      / / /_| ___| / ___( _ )/ |/ /_  
     4                        ;  \ \ /\ / / '_ \___ \| |   / _ \| | '_ \ 
     5                        ;   \ V  V /| (_) |__) | |__| (_) | | (_) |
     6                        ;    \_/\_/  \___/____/ \____\___/|_|\___/ 
     7                        ;
     8                        ; Western Design Center W65C816 device definitions                                          
     9                        ;------------------------------------------------------------------------------
  Thu Nov 19 2015 21:53                                                                                                    Page 2


    10                        ; Copyright (C)2015 HandCoded Software Ltd.
    11                        ; All rights reserved.
    12                        ;
    13                        ; This work is made available under the terms of the Creative Commons
    14                        ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    15                        ; following URL to see the details.
    16                        ;
    17                        ; http://creativecommons.org/licenses/by-nc-sa/4.0/
    18                        ;
    19                        ;==============================================================================
    20                        ; Notes:
    21                        ;
    22                        ; Various macros and definitions for the W65C816 microprocessor.
    23                        ;
    24                        ;------------------------------------------------------------------------------
    25                        
    26                        ;==============================================================================
    27                        ; Status Register Bits
    28                        ;------------------------------------------------------------------------------
    29                        
    30             00000007   N_FLAG          equ     7
    31             00000006   V_FLAG          equ     6
    32             00000005   M_FLAG          equ     5
    33             00000004   X_FLAG          equ     4
    34             00000004   B_FLAG          equ     4
    35             00000003   D_FLAG          equ     3
    36             00000002   I_FLAG          equ     2
    37             00000001   Z_FLAG          equ     1
    38             00000000   C_FLAG          equ     0
    39                        
    40                        ;==============================================================================
    41                        ; Macros
    42                        ;------------------------------------------------------------------------------
    43                        
    44                        ; Puts the processor into emulation mode. A, X and Y become 8-bits and the
    45                        ; stack is fixed at $0100-$01ff. 
    46                        
    47                        emulate         macro
    48                                        sec
    49                                        xce
    50                                        endm
    51                        
    52                        ; Puts the processor into native mode. The size of the memory and index
    53                        ; register operations is controlled by the M & X bits in the status register.
    54                        
    55                        native          macro
    56                                        clc
    57                                        xce
    58                                        endm
    59                        
    60                        ; Resets the M bit making the accumator and memory accesses 16-bits wide.
    61                         
    62                        long_a          macro
    63                                        rep     #(1<<M_FLAG)
    64                                        longa   on
    65                                        endm
    66                        
    67                        ; Resets the X bit making the index registers 16-bits wide
  Thu Nov 19 2015 21:53                                                                                                    Page 3


    68                        
    69                        long_i          macro
    70                                        rep     #(1<<X_FLAG)
    71                                        longi   on
    72                                        endm
    73                        
    74                        ; Resets the M and X bits making the accumator, memory accesses and index
    75                        ; registers 16-bits wide.
    76                                        
    77                        long_ai         macro
    78                                        rep     #(1<<M_FLAG)|(1<<X_FLAG)
    79                                        longa   on
    80                                        longi   on
    81                                        endm
    82                        
    83                        ; Sets the M bit making the accumator and memory accesses 16-bits wide.
    84                        
    85                        short_a         macro
    86                                        sep     #(1<<M_FLAG)
    87                                        longa   off
    88                                        endm
    89                        
    90                        ; Sets the X bit making the index registers 8-bits wide
    91                        
    92                        short_i         macro
    93                                        sep     #(1<<X_FLAG)
    94                                        longi   off
    95                                        endm
    96                                        
    97                        ; Sets the M and X bits making the accumator, memory accesses and index
    98                        ; registers 8-bits wide.
    99                        
   100                        short_ai        macro
   101                                        sep     #(1<<M_FLAG)|(1<<X_FLAG)
   102                                        longa   off
   103                                        longi   off
   104                                        endm
    44                                        include "w65c816sxb.inc"
     1                        ;==============================================================================
     2                        ; __        ____  ____   ____ ___  _  __  ______  ______
     3                        ; \ \      / / /_| ___| / ___( _ )/ |/ /_/ ___\ \/ / __ )
     4                        ;  \ \ /\ / / '_ \___ \| |   / _ \| | '_ \___ \\  /|  _ \
     5                        ;   \ V  V /| (_) |__) | |__| (_) | | (_) |__) /  \| |_) |
     6                        ;    \_/\_/  \___/____/ \____\___/|_|\___/____/_/\_\____/
     7                        ;
     8                        ; Western Design Center W65C816SXB Development Board Hardware Definitions
     9                        ;------------------------------------------------------------------------------
    10                        ; Copyright (C)2015 HandCoded Software Ltd.
    11                        ; All rights reserved.
    12                        ;
    13                        ; This work is made available under the terms of the Creative Commons
    14                        ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    15                        ; following URL to see the details.
    16                        ;
    17                        ; http://creativecommons.org/licenses/by-nc-sa/4.0/
    18                        ;
    19                        ;==============================================================================
    20                        ; Notes:
  Thu Nov 19 2015 21:53                                                                                                    Page 4


    21                        ;
    22                        ; All of the current stock of W65C51 ACIAs have a silicon bug that causes the
    23                        ; 'Transmit Data Register Empty' (TDRE) bit in the status register to be stuck
    24                        ; high making it impossible to tell when the transmitter is ready for the next
    25                        ; data byte.
    26                        ;
    27                        ;------------------------------------------------------------------------------
    28                        
    29             007A1200   OSC_FREQ        equ     8000000                 ; SXB runs at 8MHz
    30                        
    31                        ;==============================================================================
    32                        ; W65C51 ACIA
    33                        ;------------------------------------------------------------------------------
    34                        
    35             00007F80   ACIA_RXD        equ     $7f80
    36             00007F80   ACIA_TXD        equ     $7f80
    37             00007F81   ACIA_SR         equ     $7f81
    38             00007F82   ACIA_CMD        equ     $7f82
    39             00007F83   ACIA_CTL        equ     $7f83
    40                        
    41                        ;==============================================================================
    42                        ; W65C21 PIA
    43                        ;------------------------------------------------------------------------------
    44                        
    45             00007FA0   PIA_PIA         equ     $7fa0
    46             00007FA0   PIA_DDRA        equ     $7fa0
    47             00007FA1   PIA_CRA         equ     $7fa1
    48             00007FA2   PIA_PIB         equ     $7fa2
    49             00007FA2   PIA_DDRB        equ     $7fa2
    50             00007FA3   PIA_CRB         equ     $7fa3
    51                        
    52                        ;==============================================================================
    53                        ; W65C22 VIA
    54                        ;------------------------------------------------------------------------------
    55                        
    56             00007FC0   VIA1_ORB        equ     $7fc0
    57             00007FC0   VIA1_IRB        equ     $7fc0
    58             00007FC1   VIA1_ORA        equ     $7fc1
    59             00007FC1   VIA1_IRA        equ     $7fc1
    60             00007FC2   VIA1_DDRB       equ     $7fc2
    61             00007FC3   VIA1_DDRA       equ     $7fc3
    62             00007FC4   VIA1_T1CL       equ     $7fc4
    63             00007FC5   VIA1_T1CH       equ     $7fc5
    64             00007FC6   VIA1_T1LL       equ     $7fc6
    65             00007FC7   VIA1_T1LH       equ     $7fc7
    66             00007FC8   VIA1_T2CL       equ     $7fc8
    67             00007FC9   VIA1_T2CH       equ     $7fc9
    68             00007FCA   VIA1_SR         equ     $7fca
    69             00007FCB   VIA1_ACR        equ     $7fcb
    70             00007FCC   VIA1_PCR        equ     $7fcc
    71             00007FCD   VIA1_IFR        equ     $7fcd
    72             00007FCE   VIA1_IER        equ     $7fce
    73             00007FCF   VIA1_ORAN       equ     $7fcf
    74             00007FCF   VIA1_IRAN       equ     $7fcf
    75                        
    76                        ;------------------------------------------------------------------------------
    77                        
    78             00007FE0   VIA2_ORB        equ     $7fe0
  Thu Nov 19 2015 21:53                                                                                                    Page 5


    79             00007FE0   VIA2_IRB        equ     $7fe0
    80             00007FE1   VIA2_ORA        equ     $7fe1
    81             00007FE1   VIA2_IRA        equ     $7fe1
    82             00007FE2   VIA2_DDRB       equ     $7fe2
    83             00007FE3   VIA2_DDRA       equ     $7fe3
    84             00007FE4   VIA2_T1CL       equ     $7fe4
    85             00007FE5   VIA2_T1CH       equ     $7fe5
    86             00007FE6   VIA2_T1LL       equ     $7fe6
    87             00007FE7   VIA2_T1LH       equ     $7fe7
    88             00007FE8   VIA2_T2CL       equ     $7fe8
    89             00007FE9   VIA2_T2CH       equ     $7fe9
    90             00007FEA   VIA2_SR         equ     $7fea
    91             00007FEB   VIA2_ACR        equ     $7feb
    92             00007FEC   VIA2_PCR        equ     $7fec
    93             00007FED   VIA2_IFR        equ     $7fed
    94             00007FEE   VIA2_IER        equ     $7fee
    95             00007FEF   VIA2_ORAN       equ     $7fef
    96             00007FEF   VIA2_IRAN       equ     $7fef
    45                        
    46                        ;==============================================================================
    47                        ; Configuration
    48                        ;------------------------------------------------------------------------------
    49                        
    50             000000C8   TIMER_HZ        equ     200                     ; Jiffy timer rate Hz
    51                        
    52             00004B00   BAUD_RATE       equ     19200                   ; ACIA baud rate
    53                        
    54                        ;------------------------------------------------------------------------------
    55                        
    56             00009C3E   TMR_COUNT       equ     OSC_FREQ/TIMER_HZ-2
    57                        
    58                                        if      TMR_COUNT&$ffff0000
    59                                        messg   "TMR_COUNT does not fit in 16-bits"
    60                                        endif
    61                        
    62             000011E8   TXD_COUNT       equ     OSC_FREQ/(BAUD_RATE/11)
    63                        
    64                                        if      TXD_DELAY&$ffff0000
    65                                        messg   "TXD_DELAY does not fit in 16-bits"
    66                                        endif
    67                        
    68                        ;==============================================================================
    69                        ; Data Areas
    70                        ;------------------------------------------------------------------------------
    71                        
    72                                        data
    73                                        org     $200
    74                        
    75 00:0200:              JIFFY           ds      1                       ; Jiffy counter
    76 00:0201:              TIME            ds      4                       ; Seconds counter
    77                        
    78                        ;==============================================================================
    79                        ; Power On Reset
    80                        ;------------------------------------------------------------------------------
    81                        
    82                                        code
    83                                        extern  Start
    84                        RESET:
  Thu Nov 19 2015 21:53                                                                                                    Page 6


    85 00:0000: AD CE 7F                     lda     VIA1_IER                ; Disable VIA interrupts
    86 00:0003: 8D CE 7F                     sta     VIA1_IER
    87 00:0006: AD EE 7F                     lda     VIA2_IER
    88 00:0009: 8D EE 7F                     sta     VIA2_IER
    89                        
    90 00:000C: 9C 00 02                     stz     JIFFY                   ; Clear timer counters
    91 00:000F: 9C 01 02                     stz     TIME+0
    92 00:0012: 9C 02 02                     stz     TIME+1
    93 00:0015: 9C 03 02                     stz     TIME+2
    94 00:0018: 9C 04 02                     stz     TIME+3
    95                        
    96 00:001B: A9 1F                        lda     #%00011111              ; 8 bits, 1 stop bit, 19200 baud
    97 00:001D: 8D 83 7F                     sta     ACIA_CTL
    98 00:0020: A9 C9                        lda     #%11001001              ; No parity, no interrupt
    99 00:0022: 8D 82 7F                     sta     ACIA_CMD
   100 00:0025: AD 80 7F                     lda     ACIA_RXD                ; Clear receive buffer
   101                        
   102 00:0028: A9 40                        lda     #%01000000              ; Configure VIA Timers
   103 00:002A: 8D CB 7F                     sta     VIA1_ACR
   104 00:002D: A9 3E                        lda     #<TMR_COUNT             ; Set timer counts
   105 00:002F: 8D C4 7F                     sta     VIA1_T1CL
   106 00:0032: A9 9C                        lda     #>TMR_COUNT
   107 00:0034: 8D C5 7F                     sta     VIA1_T1CH
   108 00:0037: A9 C0                        lda     #%11000000              ; Enable Timer1 interrupt
   109 00:0039: 8D CE 7F                     sta     VIA1_IER
   110                        
   111 00:003C: A9 20                        lda     #1<<5                   ; Enable Timer2 for one shot
   112 00:003E: 1C EB 7F                     trb     VIA2_ACR
   113 00:0041: 20 xx xx                     jsr     TxDelay                 ; And prime the timer
   114                        
   115 00:0044: 58                           cli
   116                        
   117 00:0045: 4C xx xx                     jmp     Start                   ; Jump to the application start
   118                        
   119                        ;==============================================================================
   120                        ; Interrupt Handlers
   121                        ;------------------------------------------------------------------------------
   122                        
   123                        ; Handle IRQ and BRK interrupts in emulation mode.
   124                        ; -- Currently this code assumes only IRQs will occur
   125                        
   126                        IRQBRK:
   127 00:0048: 48                           pha                             ; Save callers registers
   128 00:0049: DA                           phx
   129 00:004A: 20 xx xx                     jsr     Service                 ; Service the hardware
   130 00:004D: FA                           plx                             ; Restore registers
   131 00:004E: 68                           pla
   132 00:004F: 40                           rti                             ; Done
   133                        
   134                        ; Handle NMI interrupts in emulation mode.
   135                        
   136                        NMIRQ:
   137 00:0050: 40                           rti
   138                        
   139                        ;------------------------------------------------------------------------------
   140                        
   141                        ; Handle IRQ interrupts in native mode.
   142                        
  Thu Nov 19 2015 21:53                                                                                                    Page 7


   143                        IRQ:
   144 00:0051: 48                           pha                             ; Save callers registers
   145 00:0052: DA                           phx
   146 00:0053: 5A                           phy
   147 00:0054: 08                           php                             ; Save current MX bits
   148                                        short_ai                        ; Make registers 8-bit
+  148 00:0055: E2 30                        sep     #(1<<M_FLAG)|(1<<X_FLAG)
+  148                                        longa   off
+  148                                        longi   off
   149 00:0057: 20 xx xx                     jsr     Service                 ; Service the hardware
   150 00:005A: 28                           plp                             ; Restore register widths
   151 00:005B: 7A                           ply                             ; .. and values
   152 00:005C: FA                           plx
   153 00:005D: 68                           pla
   154 00:005E: 40                           rti                             ; Done
   155                        
   156                        ; Handle IRQ interrupts in native mode.
   157                        
   158                        BRK:
   159 00:005F: 40                           rti                             ; Loop forever
   160                        
   161                        ; Handle IRQ interrupts in native mode.
   162                        
   163                        NMI:
   164 00:0060: 40                           rti
   165                        
   166                        ;------------------------------------------------------------------------------
   167                        
   168                        ; COP and ABORT interrupts are not handled.
   169                        
   170                        COP:
   171 00:0061: 80 FE                        bra     $                       ; Loop forever
   172                        
   173                        ABORT:
   174 00:0063: 80 FE                        bra     $                       ; Loop forever
   175                        
   176                        ;==============================================================================
   177                        ; Interrupt Servicing
   178                        ;------------------------------------------------------------------------------
   179                        
   180                        Service:
   181 00:0065: AD 81 7F                     lda     ACIA_SR                 ; Read ACIA status
   182 00:0068: 10 00                        bpl     ACIAHandled
   183                        
   184                        ACIAHandled:
   185                        
   186                        ;------------------------------------------------------------------------------
   187                        
   188 00:006A: AD CD 7F                     lda     VIA1_IFR                ; Is VIA1 the source?
   189 00:006D: 10 26                        bpl     VIA1Handled             ; No.
   190                        
   191 00:006F: 29 40                        and     #%01000000              ; Is Timer1 the source?
   192 00:0071: F0 22                        beq     VIA1T1Handled           ; No
   193                        
   194 00:0073: AD C4 7F                     lda     VIA1_T1CL               ; Clear the interrupt
   195                        
   196 00:0076: EE 00 02                     inc     JIFFY                   ; Bump jiffy counter
   197 00:0079: AD 00 02                     lda     JIFFY
  Thu Nov 19 2015 21:53                                                                                                    Page 8


   198 00:007C: C9 C8                        cmp     #TIMER_HZ               ; Reached a second?
   199 00:007E: D0 15                        bne     VIA1T1Handled           ; No.
   200                        
   201 00:0080: 9C 00 02                     stz     JIFFY                   ; Reset jiffy counter
   202 00:0083: EE 01 02                     inc     TIME+0                  ; And bump main timer
   203 00:0086: D0 0D                        bne     VIA1T1Handled
   204 00:0088: EE 02 02                     inc     TIME+1
   205 00:008B: D0 08                        bne     VIA1T1Handled
   206 00:008D: EE 03 02                     inc     TIME+2
   207 00:0090: D0 03                        bne     VIA1T1Handled
   208 00:0092: EE 04 02                     inc     TIME+3
   209                        VIA1T1Handled:
   210                        
   211                        VIA1Handled:
   212                        
   213                        ;------------------------------------------------------------------------------
   214                        
   215 00:0095: AD ED 7F                     lda     VIA2_IFR                ; Is VIA2 the source?
   216 00:0098: 10 00                        bpl     VIA2Handled             ; No.
   217                        
   218                        VIA2Handled:
   219                        
   220                        ;------------------------------------------------------------------------------
   221                        
   222 00:009A: 60                           rts                             ; Done
   223                        
   224                        ;==============================================================================
   225                        ; Buffered UART Interface
   226                        ;------------------------------------------------------------------------------
   227                        
   228                        ; Adds the characater in A to the transmit buffer and configure T2 for a one
   229                        ; shot interrupt when its transmission should be complete.
   230                        
   231                                        public  UartTx
   232                        UartTx:
   233 00:009B: 48                           pha                             ; Save callers A
   234 00:009C: 08                           php                             ; .. and MX bits
   235                                        short_a                         ; Ensure 8-bits
+  235 00:009D: E2 20                        sep     #(1<<M_FLAG)
+  235                                        longa   off
   236 00:009F: 48                           pha
   237 00:00A0: A9 20                        lda     #1<<5                   ; Has the last character
   238 00:00A2: 2C ED 7F     TxWait:         bit     VIA2_IFR                ; .. been transmitted?
   239 00:00A5: F0 FB                        beq     TxWait
   240 00:00A7: 68                           pla
   241 00:00A8: 8D 80 7F                     sta     ACIA_TXD                ; Transmit the character
   242 00:00AB: 20 xx xx                     jsr     TxDelay
   243 00:00AE: 28                           plp                             ; Restore flags and A
   244 00:00AF: 68                           pla
   245 00:00B0: 60                           rts                             ; Done
   246                        
   247                        TxDelay:
   248 00:00B1: A9 E8                        lda     #<TXD_COUNT             ; Load transmission oounter
   249 00:00B3: 8D E8 7F                     sta     VIA2_T2CL
   250 00:00B6: A9 11                        lda     #>TXD_COUNT
   251 00:00B8: 8D E9 7F                     sta     VIA2_T2CH
   252 00:00BB: 60                           rts
   253                        
  Thu Nov 19 2015 21:53                                                                                                    Page 9


   254                        ; Fetch the next character from the RX buffer waiting for some to arrive if the
   255                        ; buffer is empty.
   256                        
   257                                        public  UartRx
   258                        UartRx:
   259 00:00BC: 08                           php                             ; Save current MX settings
   260                                        short_a                         ; .. and ensure 8-bits
+  260 00:00BD: E2 20                        sep     #(1<<M_FLAG)
+  260                                        longa   off
   261                        RxWait:
   262 00:00BF: AD 81 7F                     lda     ACIA_SR                 ; Any data in the RX buffer
   263 00:00C2: 29 08                        and     #$08
   264 00:00C4: F0 F9                        beq     RxWait                  ; No, wait for some
   265 00:00C6: AD 80 7F                     lda     ACIA_RXD                ; Recover the received data
   266 00:00C9: 28                           plp
   267 00:00CA: 60                           rts                             ; Done
   268                        
   269                        ;==============================================================================
   270                        ; Reset Vectors
   271                        ;------------------------------------------------------------------------------
   272                        
   273                        ShadowVectors   section offset $7ee0
   274                        
   275 00:7EE0:                              ds      4               ; Reserved
   276 00:7EE4: xx xx                        dw      COP             ; $FFE4 - COP(816)
   277 00:7EE6: xx xx                        dw      BRK             ; $FFE6 - BRK(816)
   278 00:7EE8: xx xx                        dw      ABORT           ; $FFE8 - ABORT(816)
   279 00:7EEA: xx xx                        dw      NMI             ; $FFEA - NMI(816)
   280 00:7EEC:                              ds      2               ; Reserved
   281 00:7EEE: xx xx                        dw      IRQ             ; $FFEE - IRQ(816)
   282                        
   283 00:7EF0:                              ds      4
   284 00:7EF4: xx xx                        dw      COP             ; $FFF4 - COP(C02)
   285 00:7EF6:                              ds      2               ; $Reserved
   286 00:7EF8: xx xx                        dw      ABORT           ; $FFF8 - ABORT(C02)
   287 00:7EFA: xx xx                        dw      NMIRQ           ; $FFFA - NMI(C02)
   288 00:7EFC: xx xx                        dw      RESET           ; $FFFC - RESET(C02)
   289 00:7EFE: xx xx                        dw      IRQBRK          ; $FFFE - IRQBRK(C02)
   290                        
   291 00:7F00:                              ends
   292                        
   293                        ;------------------------------------------------------------------------------
   294                        
   295                        Vectors         section offset $ffe0
   296                        
   297 00:FFE0:                              ds      4               ; Reserved
   298 00:FFE4: xx xx                        dw      COP             ; $FFE4 - COP(816)
   299 00:FFE6: xx xx                        dw      BRK             ; $FFE6 - BRK(816)
   300 00:FFE8: xx xx                        dw      ABORT           ; $FFE8 - ABORT(816)
   301 00:FFEA: xx xx                        dw      NMI             ; $FFEA - NMI(816)
   302 00:FFEC:                              ds      2               ; Reserved
   303 00:FFEE: xx xx                        dw      IRQ             ; $FFEE - IRQ(816)
   304                        
   305 00:FFF0:                              ds      4
   306 00:FFF4: xx xx                        dw      COP             ; $FFF4 - COP(C02)
   307 00:FFF6:                              ds      2               ; $Reserved
   308 00:FFF8: xx xx                        dw      ABORT           ; $FFF8 - ABORT(C02)
   309 00:FFFA: xx xx                        dw      NMIRQ           ; $FFFA - NMI(C02)
  Thu Nov 19 2015 21:53                                                                                                    Page 10


   310 00:FFFC: xx xx                        dw      RESET           ; $FFFC - RESET(C02)
   311 00:FFFE: xx xx                        dw      IRQBRK          ; $FFFE - IRQBRK(C02)
   312                        
   313 01:0000:                              ends
   314                        
   315                                        end


      Lines assembled: 522
      Errors: 0
